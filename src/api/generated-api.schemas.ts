/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * WeHand Tennis API
 * WeHand 테니스 매칭 앱 API 문서
 * OpenAPI spec version: 1.0.0
 */
/**
 * 응답 데이터 (성공 시 포함)
 */
export type SuccessResponseData = { [key: string]: unknown };

export interface SuccessResponse {
  /** 요청 성공 여부 */
  success: boolean;
  /** 응답 데이터 (성공 시 포함) */
  data?: SuccessResponseData;
  /** 성공 메시지 (선택적) */
  message?: string;
}

/**
 * 추가 에러 정보 (개발 환경에서만 표시)
 */
export type ErrorResponseErrorDetails = { [key: string]: unknown };

export type ErrorResponseError = {
  /** 에러 코드 (프로그래밍 처리용) */
  code: string;
  /** 사용자에게 표시할 에러 메시지 */
  message: string;
  /** 추가 에러 정보 (개발 환경에서만 표시) */
  details?: ErrorResponseErrorDetails;
};

export interface ErrorResponse {
  /** 요청 실패를 나타냄 */
  success: boolean;
  error: ErrorResponseError;
}

export interface PaginationInfo {
  /** 현재 페이지 번호 (1부터 시작) */
  page: number;
  /** 페이지당 항목 수 */
  limit: number;
  /** 전체 항목 수 */
  total: number;
  /** 전체 페이지 수 */
  totalPages: number;
  /** 다음 페이지 존재 여부 */
  hasNext: boolean;
  /** 이전 페이지 존재 여부 */
  hasPrev: boolean;
}

export interface User {
  /** 사용자 고유 ID (UUID) */
  id: string;
  /** 사용자 이메일 주소 */
  email: string;
  /** 사용자 실명 */
  name?: string;
  /**
   * 사용자 닉네임 (고유값)
   * @maxLength 20
   */
  nickname?: string;
  /** 사용자 활동 지역 */
  location?: string;
  /**
   * 자기소개
   * @maxLength 500
   */
  bio?: string;
  /** 프로필 이미지 URL */
  profileImageUrl?: string;
  /**
   * NTRP 레벨 (1.0-7.0)
   * @minimum 1
   * @maximum 7
   */
  ntrp?: number;
  /**
   * 테니스 경력 (년)
   * @minimum 0
   * @maximum 50
   */
  experienceYears?: number;
  /** 선호하는 플레이 스타일 */
  favoriteStyle?: string;
}

export type UserProfileStats = {
  /** 총 경기 수 */
  totalMatches: number;
  /** 승리 수 */
  wins: number;
  /** 패배 수 */
  losses: number;
  /** 승률 (%) */
  winRate: number;
  /** 전체 랭킹 */
  ranking?: number;
};

export type UserProfileReviews = {
  /** 받은 리뷰 총 개수 */
  totalReviews?: number;
  /** 긍정적 리뷰 수 */
  positiveReviews?: number;
  /** 부정적 리뷰 수 */
  negativeReviews?: number;
  /** 평균 평점 */
  avgRating?: number;
};

export interface UserProfile {
  userInfo?: User;
  stats?: UserProfileStats;
  reviews?: UserProfileReviews;
}

/**
 * 경기 유형
 */
export type MatchGameType = typeof MatchGameType[keyof typeof MatchGameType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MatchGameType = {
  단식: '단식',
  남복: '남복',
  여복: '여복',
  혼복: '혼복',
} as const;

/**
 * 매치 상태 (recruiting: 모집중, full: 마감, confirmed: 확정, completed: 완료, cancelled: 취소)
 */
export type MatchStatus = typeof MatchStatus[keyof typeof MatchStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MatchStatus = {
  recruiting: 'recruiting',
  full: 'full',
  confirmed: 'confirmed',
  completed: 'completed',
  cancelled: 'cancelled',
} as const;

export interface Match {
  /** 매치 고유 ID */
  id: string;
  /**
   * 매치 제목
   * @maxLength 100
   */
  title: string;
  /** 테니스장 이름 */
  location: string;
  /** 코트 번호/이름 */
  court: string;
  /** 테니스장 주소 */
  address?: string;
  /** 경기 날짜 (MM/DD 형식) */
  date: string;
  /**
   * 시작 시간 (HH:MM)
   * @pattern ^([01]\d|2[0-3]):([0-5]\d)$
   */
  startTime: string;
  /**
   * 종료 시간 (HH:MM)
   * @pattern ^([01]\d|2[0-3]):([0-5]\d)$
   */
  endTime: string;
  /** 참가자 현황 (현재/최대) */
  participants?: string;
  /** 경기 유형 */
  gameType: MatchGameType;
  /** 레벨 (초급/초중급/중급/중상급/상급) */
  level?: string;
  /** 참가비 (무료 또는 금액) */
  price?: string;
  /** 매치 상태 (recruiting: 모집중, full: 마감, confirmed: 확정, completed: 완료, cancelled: 취소) */
  status: MatchStatus;
  /** 호스트 이름 */
  hostName?: string;
  /** 호스트 NTRP 레벨 */
  hostNtrp?: string;
  /** 호스트 경력 */
  hostExperience?: string;
  /**
   * 매치 설명
   * @maxLength 1000
   */
  description?: string;
  /** 사용자 위치로부터의 거리 */
  distance?: string;
  /** 매치 규칙/주의사항 */
  rules?: string[];
  /** 필요 장비 목록 */
  equipment?: string[];
  /** 주차 정보 */
  parking?: string;
  /** 편의시설 목록 */
  amenities?: string[];
}

/**
 * 게임 유형 (필수) - singles: 단식, mens_doubles: 남복, womens_doubles: 여복, mixed_doubles: 혼복
 */
export type CreateMatchRequestGameType = typeof CreateMatchRequestGameType[keyof typeof CreateMatchRequestGameType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMatchRequestGameType = {
  singles: 'singles',
  mens_doubles: 'mens_doubles',
  womens_doubles: 'womens_doubles',
  mixed_doubles: 'mixed_doubles',
} as const;

export interface CreateMatchRequest {
  /**
   * 매치 제목 (필수, 1-100자)
   * @minLength 1
   * @maxLength 100
   */
  title: string;
  /**
   * 매치 상세 설명 (선택, 최대 1000자)
   * @maxLength 1000
   */
  description?: string;
  /** 게임 유형 (필수) - singles: 단식, mens_doubles: 남복, womens_doubles: 여복, mixed_doubles: 혼복 */
  game_type: CreateMatchRequestGameType;
  /** 테니스장 ID (필수, UUID 형식) */
  venue_id: string;
  /**
   * 코트 번호/이름 (필수, 1-50자)
   * @minLength 1
   * @maxLength 50
   */
  court: string;
  /** 경기 날짜 (필수, YYYY-MM-DD 형식) */
  match_date: string;
  /**
   * 시작 시간 (필수, HH:MM 형식)
   * @pattern ^([01]\d|2[0-3]):([0-5]\d)$
   */
  start_time: string;
  /**
   * 종료 시간 (필수, HH:MM 형식)
   * @pattern ^([01]\d|2[0-3]):([0-5]\d)$
   */
  end_time: string;
  /**
   * 최대 참가자 수 (필수, 2-8명)
   * @minimum 2
   * @maximum 8
   */
  max_participants: number;
  /**
   * 모집 최소 NTRP 레벨 (선택, 1.0-7.0)
   * @minimum 1
   * @maximum 7
   */
  recruit_ntrp_min?: number;
  /**
   * 모집 최대 NTRP 레벨 (선택, 1.0-7.0)
   * @minimum 1
   * @maximum 7
   */
  recruit_ntrp_max?: number;
  /**
   * 모집 최소 경력 (선택, 년 단위)
   * @minimum 0
   */
  recruit_experience_min?: number;
  /**
   * 모집 최대 경력 (선택, 년 단위)
   * @minimum 0
   */
  recruit_experience_max?: number;
  /**
   * 참가비 (선택, 원 단위, 0=무료)
   * @minimum 0
   */
  price?: number;
  /**
   * 매치 규칙 (선택, 최대 10개, 각 200자 이내)
   * @maxItems 10
   */
  rules?: string[];
  /**
   * 필요 장비 목록 (선택, 최대 20개)
   * @maxItems 20
   */
  equipment?: string[];
  /**
   * 주차 정보 (선택, 최대 200자)
   * @maxLength 200
   */
  parking_info?: string;
}

export interface JoinMatchRequest {
  /**
   * 참가 신청 메시지 (선택, 최대 500자)
   * @maxLength 500
   */
  message?: string;
}

export interface LoginRequest {
  /** 이메일 주소 (필수) */
  email: string;
  /**
   * 비밀번호 (필수, 최소 6자)
   * @minLength 6
   */
  password: string;
}

export interface SignupRequest {
  /** 이메일 주소 (필수) */
  email: string;
  /**
   * 비밀번호 (필수, 최소 6자)
   * @minLength 6
   */
  password: string;
  /**
   * 실명 (필수, 1-50자)
   * @minLength 1
   * @maxLength 50
   */
  name: string;
}

export type LoginResponseData = {
  /** JWT 액세스 토큰 */
  accessToken: string;
  /** JWT 리프레시 토큰 */
  refreshToken: string;
  user: User;
};

export interface LoginResponse {
  success?: boolean;
  data?: LoginResponseData;
}

export interface RefreshTokenRequest {
  /** 리프레시 토큰 (필수) */
  refreshToken: string;
}

export interface KakaoLoginRequest {
  /** 카카오 OAuth 인증 코드 (필수) */
  code: string;
}

/**
 * 지역 유형 (city: 시, province: 도, district: 구/군)
 */
export type RegionType = typeof RegionType[keyof typeof RegionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegionType = {
  city: 'city',
  province: 'province',
  district: 'district',
} as const;

/**
 * 하위 시/구 목록 (도의 경우)
 */
export type RegionDistrictsOneOf = {[key: string]: string[]};

export type RegionDistricts = string[] | RegionDistrictsOneOf;

export interface Region {
  /** 지역 ID */
  id?: string;
  /** 지역명 */
  name?: string;
  /** 지역 유형 (city: 시, province: 도, district: 구/군) */
  type?: RegionType;
  districts?: RegionDistricts;
}

/**
 * 운영 시간
 */
export type VenueOperatingHours = {[key: string]: string};

export interface Venue {
  /** 테니스장 ID */
  id: string;
  /** 테니스장 이름 */
  name: string;
  /** 테니스장 주소 */
  address: string;
  /** 코트 목록 */
  courts?: string[];
  /** 편의시설 목록 */
  amenities?: string[];
  /** 가격대 정보 */
  priceRange?: string;
  /** 연락처 */
  phone?: string;
  /** 웹사이트 URL */
  website?: string;
  /** 운영 시간 */
  operatingHours?: VenueOperatingHours;
  /** 사용자 위치로부터의 거리 (근처 검색 시) */
  distance?: string;
}

export type HomeResponseUser = {
  /** 사용자 이름 */
  name: string;
  /** 시간대별 인사말 */
  greeting: string;
  /** 동기부여 메시지 */
  motivationMessage: string;
};

export interface HomeResponse {
  user?: HomeResponseUser;
  /** 다가오는 매치 목록 */
  upcomingMatches?: Match[];
}

/**
 * 게시글 카테고리
 */
export type PostCategory = typeof PostCategory[keyof typeof PostCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostCategory = {
  free: 'free',
  tips: 'tips',
  equipment: 'equipment',
  match: 'match',
  question: 'question',
  announcement: 'announcement',
} as const;

export type PostAuthor = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

export interface Post {
  /** 게시글 ID */
  id: string;
  /** 게시글 제목 */
  title: string;
  /** 게시글 내용 */
  content: string;
  /** 게시글 카테고리 */
  category: PostCategory;
  /** 첨부 이미지 URL 목록 */
  images?: string[];
  /** 좋아요 수 */
  likes_count?: number;
  /** 댓글 수 */
  comments_count?: number;
  /** 조회수 */
  views_count?: number;
  /** 생성일시 */
  created_at: string;
  author?: PostAuthor;
}

export type PostDetailAllOf = {
  /** 현재 사용자의 좋아요 여부 */
  isLiked?: boolean;
};

export type PostDetail = Post & PostDetailAllOf;

/**
 * 게시글 카테고리 (필수)
 */
export type CreatePostRequestCategory = typeof CreatePostRequestCategory[keyof typeof CreatePostRequestCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePostRequestCategory = {
  free: 'free',
  tips: 'tips',
  equipment: 'equipment',
  match: 'match',
  question: 'question',
  announcement: 'announcement',
} as const;

export interface CreatePostRequest {
  /**
   * 게시글 제목 (필수, 1-200자)
   * @minLength 1
   * @maxLength 200
   */
  title: string;
  /**
   * 게시글 내용 (필수, 1-5000자)
   * @minLength 1
   * @maxLength 5000
   */
  content: string;
  /** 게시글 카테고리 (필수) */
  category: CreatePostRequestCategory;
  /**
   * 첨부 이미지 URL 목록 (선택, 최대 10개)
   * @maxItems 10
   */
  images?: string[];
}

export interface UpdatePostRequest {
  /**
   * 게시글 제목 (선택)
   * @minLength 1
   * @maxLength 200
   */
  title?: string;
  /**
   * 게시글 내용 (선택)
   * @minLength 1
   * @maxLength 5000
   */
  content?: string;
  /**
   * 첨부 이미지 URL 목록 (선택)
   * @maxItems 10
   */
  images?: string[];
}

export type CommentAuthor = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

export interface Comment {
  /** 댓글 ID */
  id: string;
  /** 댓글 내용 */
  content: string;
  /** 좋아요 수 */
  likes_count?: number;
  /** 생성일시 */
  created_at: string;
  author?: CommentAuthor;
  /** 대댓글 목록 */
  replies?: Comment[];
}

export interface CreateCommentRequest {
  /**
   * 댓글 내용 (필수, 1-1000자)
   * @minLength 1
   * @maxLength 1000
   */
  content: string;
  /** 부모 댓글 ID (대댓글인 경우, 선택) */
  parent_id?: string;
}

export interface UpdateProfileRequest {
  /**
   * 실명 (선택, 1-50자)
   * @minLength 1
   * @maxLength 50
   */
  name?: string;
  /**
   * 닉네임 (선택, 2-20자, 고유값)
   * @minLength 2
   * @maxLength 20
   */
  nickname?: string;
  /**
   * 활동 지역 (선택, 최대 100자)
   * @maxLength 100
   */
  location?: string;
  /**
   * 자기소개 (선택, 최대 500자)
   * @maxLength 500
   */
  bio?: string;
  /** 프로필 이미지 URL (선택) */
  profile_image_url?: string;
  /**
   * NTRP 레벨 (선택, 1.0-7.0)
   * @minimum 1
   * @maximum 7
   */
  ntrp?: number;
  /**
   * 테니스 경력 (선택, 년 단위, 0-50)
   * @minimum 0
   * @maximum 50
   */
  experience_years?: number;
  /**
   * 선호하는 플레이 스타일 (선택)
   * @maxLength 100
   */
  favorite_style?: string;
  /**
   * 키 (선택, cm 단위)
   * @minimum 100
   * @maximum 250
   */
  height?: number;
  /**
   * 몸무게 (선택, kg 단위)
   * @minimum 30
   * @maximum 200
   */
  weight?: number;
  /**
   * 전화번호 (선택)
   * @maxLength 20
   */
  phone?: string;
}

/**
 * 참가 상태
 */
export type MatchParticipationStatus = typeof MatchParticipationStatus[keyof typeof MatchParticipationStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MatchParticipationStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  cancelled: 'cancelled',
} as const;

export interface MatchParticipation {
  /** 참가 기록 ID */
  id?: string;
  /** 참가 상태 */
  status?: MatchParticipationStatus;
  /** 참가 신청일시 */
  joined_at?: string;
  match?: Match;
}

export type ReviewReviewer = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

export type ReviewMatch = {
  id?: string;
  title?: string;
  match_date?: string;
};

export interface Review {
  /** 리뷰 ID */
  id?: string;
  /**
   * 평점 (1-5)
   * @minimum 1
   * @maximum 5
   */
  rating?: number;
  /** 리뷰 내용 */
  comment?: string;
  /**
   * NTRP 레벨 평가 (1.0-7.0)
   * @minimum 1
   * @maximum 7
   */
  ntrp_evaluation?: number;
  /** 작성일시 */
  created_at?: string;
  reviewer?: ReviewReviewer;
  match?: ReviewMatch;
}

export interface MatchBookmark {
  /** 북마크 ID */
  id?: string;
  /** 북마크 생성일시 */
  created_at?: string;
  match?: Match;
}

/**
 * 알림 유형
 */
export type NotificationType = typeof NotificationType[keyof typeof NotificationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationType = {
  match: 'match',
  chat: 'chat',
  community: 'community',
  system: 'system',
  marketing: 'marketing',
} as const;

/**
 * 알림 관련 추가 데이터 (JSON 객체)
 */
export type NotificationData = { [key: string]: unknown };

export interface Notification {
  /** 알림 ID */
  id: string;
  /** 알림 유형 */
  type: NotificationType;
  /** 알림 제목 */
  title: string;
  /** 알림 내용 */
  message: string;
  /** 알림 관련 추가 데이터 (JSON 객체) */
  data?: NotificationData;
  /** 읽음 여부 */
  is_read: boolean;
  /** 알림 생성일시 */
  created_at: string;
}

/**
 * 디바이스 유형 (필수)
 */
export type UpdateFcmTokenRequestDeviceType = typeof UpdateFcmTokenRequestDeviceType[keyof typeof UpdateFcmTokenRequestDeviceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFcmTokenRequestDeviceType = {
  ios: 'ios',
  android: 'android',
  web: 'web',
} as const;

export interface UpdateFcmTokenRequest {
  /**
   * FCM 토큰 (필수)
   * @minLength 1
   */
  fcm_token: string;
  /** 디바이스 유형 (필수) */
  device_type: UpdateFcmTokenRequestDeviceType;
  /**
   * 디바이스 고유 ID (필수)
   * @minLength 1
   */
  device_id: string;
}

export interface NotificationSettings {
  /** 푸시 알림 전체 활성화 여부 */
  push_enabled?: boolean;
  /** 매치 관련 알림 활성화 여부 */
  match_notifications?: boolean;
  /** 채팅 알림 활성화 여부 */
  chat_notifications?: boolean;
  /** 커뮤니티 알림 활성화 여부 */
  community_notifications?: boolean;
  /** 마케팅 알림 활성화 여부 */
  marketing_notifications?: boolean;
}

export interface UpdateNotificationSettingsRequest {
  /** 푸시 알림 전체 활성화 여부 (선택) */
  push_enabled?: boolean;
  /** 매치 관련 알림 활성화 여부 (선택) */
  match_notifications?: boolean;
  /** 채팅 알림 활성화 여부 (선택) */
  chat_notifications?: boolean;
  /** 커뮤니티 알림 활성화 여부 (선택) */
  community_notifications?: boolean;
  /** 마케팅 알림 활성화 여부 (선택) */
  marketing_notifications?: boolean;
}

/**
 * 채팅방 유형
 */
export type ChatRoomType = typeof ChatRoomType[keyof typeof ChatRoomType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChatRoomType = {
  private: 'private',
  match: 'match',
} as const;

/**
 * 매치 채팅방인 경우 매치 정보
 */
export type ChatRoomMatch = {
  id?: string;
  title?: string;
  match_date?: string;
};

/**
 * 1:1 채팅방인 경우 상대방 정보
 */
export type ChatRoomOtherParticipant = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

export interface ChatRoom {
  /** 채팅방 ID */
  id: string;
  /** 채팅방 이름 */
  name?: string;
  /** 채팅방 유형 */
  type: ChatRoomType;
  /** 매치 채팅방인 경우 매치 정보 */
  match?: ChatRoomMatch;
  /** 1:1 채팅방인 경우 상대방 정보 */
  otherParticipant?: ChatRoomOtherParticipant;
  lastMessage?: ChatMessage;
  /** 읽지 않은 메시지 수 */
  unreadCount?: number;
  /** 마지막 업데이트 일시 */
  updatedAt?: string;
}

export type ChatRoomDetailAllOfParticipantsItemUser = {
  id?: string;
  nickname?: string;
  profile_image?: string;
};

export type ChatRoomDetailAllOfParticipantsItem = {
  user?: ChatRoomDetailAllOfParticipantsItemUser;
  /** 채팅방 참가일시 */
  joined_at?: string;
};

export type ChatRoomDetailAllOf = {
  /** 채팅방 참가자 목록 */
  participants?: ChatRoomDetailAllOfParticipantsItem[];
};

export type ChatRoomDetail = ChatRoom & ChatRoomDetailAllOf;

/**
 * 채팅방 유형 (필수)
 */
export type CreateChatRoomRequestType = typeof CreateChatRoomRequestType[keyof typeof CreateChatRoomRequestType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateChatRoomRequestType = {
  private: 'private',
  match: 'match',
} as const;

export interface CreateChatRoomRequest {
  /** 채팅방 유형 (필수) */
  type: CreateChatRoomRequestType;
  /**
   * 참가자 ID 목록 (1:1 채팅의 경우 필수)
   * @minItems 1
   */
  participant_ids?: string[];
  /** 매치 ID (매치 채팅방의 경우 필수) */
  match_id?: string;
  /**
   * 채팅방 이름 (선택)
   * @maxLength 100
   */
  name?: string;
}

/**
 * 메시지 유형
 */
export type ChatMessageMessageType = typeof ChatMessageMessageType[keyof typeof ChatMessageMessageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChatMessageMessageType = {
  text: 'text',
  image: 'image',
  system: 'system',
} as const;

/**
 * 메시지 발신자 정보
 */
export type ChatMessageSender = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

export type ChatMessageReplyMessageSender = {
  nickname?: string;
};

/**
 * 답글 대상 메시지 정보
 */
export type ChatMessageReplyMessage = {
  id?: string;
  content?: string;
  sender?: ChatMessageReplyMessageSender;
};

export interface ChatMessage {
  /** 메시지 ID */
  id: string;
  /** 메시지 내용 */
  content: string;
  /** 메시지 유형 */
  message_type: ChatMessageMessageType;
  /** 메시지 생성일시 */
  created_at: string;
  /** 답글 대상 메시지 ID */
  reply_to?: string;
  /** 메시지 발신자 정보 */
  sender?: ChatMessageSender;
  /** 답글 대상 메시지 정보 */
  reply_message?: ChatMessageReplyMessage;
}

/**
 * 메시지 유형 (기본값: text)
 */
export type SendMessageRequestMessageType = typeof SendMessageRequestMessageType[keyof typeof SendMessageRequestMessageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SendMessageRequestMessageType = {
  text: 'text',
  image: 'image',
  system: 'system',
} as const;

export interface SendMessageRequest {
  /**
   * 메시지 내용 (필수, 1-1000자)
   * @minLength 1
   * @maxLength 1000
   */
  content: string;
  /** 메시지 유형 (기본값: text) */
  message_type?: SendMessageRequestMessageType;
  /** 답글 대상 메시지 ID (선택) */
  reply_to?: string;
}

export type GetApiAuthMe200 = {
  success?: boolean;
  data?: User;
};

export type GetApiChatRoomsParams = {
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 50
 */
limit?: number;
};

export type GetApiChatRooms200 = {
  success?: boolean;
  data?: ChatRoom[];
  pagination?: PaginationInfo;
};

export type PostApiChatRooms201Data = {
  id?: string;
  message?: string;
};

export type PostApiChatRooms201 = {
  success?: boolean;
  data?: PostApiChatRooms201Data;
};

export type GetApiChatRoomsChatRoomId200 = {
  success?: boolean;
  data?: ChatRoomDetail;
};

export type GetApiChatRoomsChatRoomIdMessagesParams = {
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * 특정 메시지 ID 이전 메시지 조회 (무한 스크롤용)
 */
before?: string;
};

export type GetApiChatRoomsChatRoomIdMessages200 = {
  success?: boolean;
  data?: ChatMessage[];
  pagination?: PaginationInfo;
};

export type PostApiChatRoomsChatRoomIdMessages201 = {
  success?: boolean;
  data?: ChatMessage;
};

export type PostApiChatRoomsChatRoomIdReadBody = {
  /** 마지막으로 읽은 메시지 ID */
  messageId: string;
};

export type GetApiCommunityPostsParams = {
/**
 * 카테고리 필터 (all=전체, free=자유게시판, tips=팁/기술, equipment=장비, match=경기후기, question=질문, announcement=공지사항)
 */
category?: GetApiCommunityPostsCategory;
/**
 * 검색어 (제목, 내용 검색)
 */
search?: string;
/**
 * 정렬 방식
 */
sort?: GetApiCommunityPostsSort;
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 50
 */
limit?: number;
};

export type GetApiCommunityPostsCategory = typeof GetApiCommunityPostsCategory[keyof typeof GetApiCommunityPostsCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiCommunityPostsCategory = {
  all: 'all',
  free: 'free',
  tips: 'tips',
  equipment: 'equipment',
  match: 'match',
  question: 'question',
  announcement: 'announcement',
} as const;

export type GetApiCommunityPostsSort = typeof GetApiCommunityPostsSort[keyof typeof GetApiCommunityPostsSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiCommunityPostsSort = {
  latest: 'latest',
  popular: 'popular',
  comments: 'comments',
} as const;

export type GetApiCommunityPosts200 = {
  success?: boolean;
  data?: Post[];
  pagination?: PaginationInfo;
};

export type PostApiCommunityPosts201Data = {
  id?: string;
  message?: string;
};

export type PostApiCommunityPosts201 = {
  success?: boolean;
  data?: PostApiCommunityPosts201Data;
};

export type GetApiCommunityPostsPostId200 = {
  success?: boolean;
  data?: PostDetail;
};

export type GetApiCommunityPostsPostIdCommentsParams = {
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetApiCommunityPostsPostIdComments200 = {
  success?: boolean;
  data?: Comment[];
  pagination?: PaginationInfo;
};

export type PostApiCommunityPostsPostIdComments201Data = {
  id?: string;
  message?: string;
};

export type PostApiCommunityPostsPostIdComments201 = {
  success?: boolean;
  data?: PostApiCommunityPostsPostIdComments201Data;
};

export type GetApiHome200 = {
  success?: boolean;
  data?: HomeResponse;
};

export type GetApiMatchesParams = {
/**
 * 검색어
 */
search?: string;
/**
 * 지역 필터
 */
region?: string;
/**
 * 게임 유형
 */
game_type?: GetApiMatchesGameType;
/**
 * 날짜 (YYYY-MM-DD)
 */
date?: string;
/**
 * 최소 NTRP 레벨
 * @minimum 1
 * @maximum 7
 */
ntrp_min?: number;
/**
 * 최대 NTRP 레벨
 * @minimum 1
 * @maximum 7
 */
ntrp_max?: number;
/**
 * 최소 경력 (년)
 * @minimum 0
 */
experience_min?: number;
/**
 * 최대 경력 (년)
 * @minimum 0
 */
experience_max?: number;
/**
 * 정렬 기준 (latest=최신순, distance=거리순, price=가격순)
 */
sort?: GetApiMatchesSort;
/**
 * 사용자 위도 (거리순 정렬 시 필수)
 * @minimum -90
 * @maximum 90
 */
user_lat?: number;
/**
 * 사용자 경도 (거리순 정렬 시 필수)
 * @minimum -180
 * @maximum 180
 */
user_lng?: number;
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetApiMatchesGameType = typeof GetApiMatchesGameType[keyof typeof GetApiMatchesGameType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMatchesGameType = {
  singles: 'singles',
  mens_doubles: 'mens_doubles',
  womens_doubles: 'womens_doubles',
  mixed_doubles: 'mixed_doubles',
} as const;

export type GetApiMatchesSort = typeof GetApiMatchesSort[keyof typeof GetApiMatchesSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMatchesSort = {
  latest: 'latest',
  distance: 'distance',
  price: 'price',
} as const;

export type GetApiMatches200DataItem = {
  id?: string;
  title?: string;
  location?: string;
  court?: string;
  date?: string;
  startTime?: string;
  endTime?: string;
  participants?: string;
  gameType?: string;
  level?: string;
  price?: string;
  status?: string;
  hostName?: string;
  description?: string;
  /**
   * 사용자 위치에서의 거리 (거리순 정렬 시에만 제공)
   * @nullable
   */
  distance?: string | null;
};

export type GetApiMatches200 = {
  success?: boolean;
  data?: GetApiMatches200DataItem[];
  pagination?: PaginationInfo;
};

export type PostApiMatches201Data = {
  id?: string;
  message?: string;
};

export type PostApiMatches201 = {
  success?: boolean;
  data?: PostApiMatches201Data;
};

export type GetApiMatchesMatchId200 = {
  success?: boolean;
  data?: Match;
};

export type PostApiMatchesMatchIdShare200Data = {
  /** 공유 URL */
  shareUrl?: string;
  message?: string;
};

export type PostApiMatchesMatchIdShare200 = {
  success?: boolean;
  data?: PostApiMatchesMatchIdShare200Data;
};

export type PostApiMatchesMatchIdChat201Data = {
  /** 채팅방 ID */
  chatRoomId?: string;
  message?: string;
};

export type PostApiMatchesMatchIdChat201 = {
  success?: boolean;
  data?: PostApiMatchesMatchIdChat201Data;
};

export type GetApiNotificationsParams = {
/**
 * 알림 타입 필터
 */
type?: GetApiNotificationsType;
/**
 * 읽지 않은 알림만 조회
 */
unread_only?: GetApiNotificationsUnreadOnly;
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetApiNotificationsType = typeof GetApiNotificationsType[keyof typeof GetApiNotificationsType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsType = {
  all: 'all',
  match: 'match',
  chat: 'chat',
  community: 'community',
  system: 'system',
} as const;

export type GetApiNotificationsUnreadOnly = typeof GetApiNotificationsUnreadOnly[keyof typeof GetApiNotificationsUnreadOnly];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsUnreadOnly = {
  true: true,
  false: false,
} as const;

export type GetApiNotifications200 = {
  success?: boolean;
  data?: Notification[];
  pagination?: PaginationInfo;
};

export type GetApiNotificationsUnreadCount200Data = {
  /** 읽지 않은 알림 개수 */
  unreadCount?: number;
};

export type GetApiNotificationsUnreadCount200 = {
  success?: boolean;
  data?: GetApiNotificationsUnreadCount200Data;
};

export type GetApiNotificationsSettings200 = {
  success?: boolean;
  data?: NotificationSettings;
};

export type GetApiProfileMe200 = {
  success?: boolean;
  data?: UserProfile;
};

export type GetApiProfileUsersUserId200 = {
  success?: boolean;
  data?: UserProfile;
};

export type GetApiProfileMyMatchesParams = {
/**
 * 매치 상태 필터
 */
status?: GetApiProfileMyMatchesStatus;
/**
 * 매치 시점 필터
 */
type?: GetApiProfileMyMatchesType;
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 50
 */
limit?: number;
};

export type GetApiProfileMyMatchesStatus = typeof GetApiProfileMyMatchesStatus[keyof typeof GetApiProfileMyMatchesStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiProfileMyMatchesStatus = {
  all: 'all',
  pending: 'pending',
  confirmed: 'confirmed',
  cancelled: 'cancelled',
} as const;

export type GetApiProfileMyMatchesType = typeof GetApiProfileMyMatchesType[keyof typeof GetApiProfileMyMatchesType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiProfileMyMatchesType = {
  all: 'all',
  upcoming: 'upcoming',
  past: 'past',
} as const;

export type GetApiProfileMyMatches200 = {
  success?: boolean;
  data?: MatchParticipation[];
  pagination?: PaginationInfo;
};

export type GetApiProfileMyReviewsParams = {
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 50
 */
limit?: number;
};

export type GetApiProfileMyReviews200 = {
  success?: boolean;
  data?: Review[];
  pagination?: PaginationInfo;
};

export type GetApiProfileBookmarksParams = {
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 50
 */
limit?: number;
};

export type GetApiProfileBookmarks200 = {
  success?: boolean;
  data?: MatchBookmark[];
  pagination?: PaginationInfo;
};

export type GetApiRegions200DataRegions = {[key: string]: Region};

export type GetApiRegions200Data = {
  regions?: GetApiRegions200DataRegions;
};

export type GetApiRegions200 = {
  success?: boolean;
  data?: GetApiRegions200Data;
};

export type GetApiVenuesParams = {
/**
 * 검색 키워드 (테니스장 이름, 주소)
 */
keyword?: string;
/**
 * 지역 필터
 */
region?: string;
/**
 * 구/군 필터
 */
district?: string;
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetApiVenues200 = {
  success?: boolean;
  data?: Venue[];
  pagination?: PaginationInfo;
};

export type GetApiVenuesAllParams = {
/**
 * 페이지 번호
 * @minimum 1
 */
page?: number;
/**
 * 페이지 크기
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetApiVenuesAll200Data = {
  venues?: Venue[];
  pagination?: PaginationInfo;
};

export type GetApiVenuesAll200 = {
  success?: boolean;
  data?: GetApiVenuesAll200Data;
};

export type GetApiVenuesNearbyParams = {
/**
 * 위도
 */
latitude: number;
/**
 * 경도
 */
longitude: number;
/**
 * 반경 (km)
 * @minimum 1
 * @maximum 50
 */
radius?: number;
/**
 * 최대 결과 수
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type GetApiVenuesNearby200DataItemAllOf = {
  /** 현재 위치로부터의 거리 */
  distance?: string;
};

export type GetApiVenuesNearby200DataItem = Venue & GetApiVenuesNearby200DataItemAllOf;

export type GetApiVenuesNearby200 = {
  success?: boolean;
  data?: GetApiVenuesNearby200DataItem[];
};

export type GetApiVenuesVenueId200DataAllOf = {
  /** 최근 이 테니스장에서 열린 매치들 */
  recentMatches?: Match[];
  /** 총 매치 수 */
  totalMatches?: number;
};

export type GetApiVenuesVenueId200Data = Venue & GetApiVenuesVenueId200DataAllOf;

export type GetApiVenuesVenueId200 = {
  success?: boolean;
  data?: GetApiVenuesVenueId200Data;
};

