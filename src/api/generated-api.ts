/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * WeHand Tennis API
 * WeHand 테니스 매칭 앱 API 문서
 * OpenAPI spec version: 1.0.0
 */
import { customAxiosInstance } from "./api-client";
/**
 * 응답 데이터 (성공 시 포함)
 */
export type SuccessResponseData = { [key: string]: unknown };

export interface SuccessResponse {
  /** 요청 성공 여부 */
  success: boolean;
  /** 응답 데이터 (성공 시 포함) */
  data?: SuccessResponseData;
  /** 성공 메시지 (선택적) */
  message?: string;
}

/**
 * 추가 에러 정보 (개발 환경에서만 표시)
 */
export type ErrorResponseErrorDetails = { [key: string]: unknown };

export type ErrorResponseError = {
  /** 에러 코드 (프로그래밍 처리용) */
  code: string;
  /** 사용자에게 표시할 에러 메시지 */
  message: string;
  /** 추가 에러 정보 (개발 환경에서만 표시) */
  details?: ErrorResponseErrorDetails;
};

export interface ErrorResponse {
  /** 요청 실패를 나타냄 */
  success: boolean;
  error: ErrorResponseError;
}

export interface PaginationInfo {
  /** 현재 페이지 번호 (1부터 시작) */
  page: number;
  /** 페이지당 항목 수 */
  limit: number;
  /** 전체 항목 수 */
  total: number;
  /** 전체 페이지 수 */
  totalPages: number;
  /** 다음 페이지 존재 여부 */
  hasNext: boolean;
  /** 이전 페이지 존재 여부 */
  hasPrev: boolean;
}

/**
 * 성별 (male, female, other)
 */
export type UserGender = (typeof UserGender)[keyof typeof UserGender];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserGender = {
  male: "male",
  female: "female",
  other: "other",
} as const;

export interface User {
  /** 사용자 고유 ID (UUID) */
  id: string;
  /** 사용자 이메일 주소 */
  email: string;
  /** 사용자 실명 */
  name?: string;
  /**
   * 사용자 닉네임 (고유값)
   * @maxLength 20
   */
  nickname?: string;
  /** 사용자 활동 지역 */
  location?: string;
  /**
   * 자기소개
   * @maxLength 500
   */
  bio?: string;
  /** 프로필 이미지 URL */
  profileImageUrl?: string;
  /** 성별 (male, female, other) */
  gender?: UserGender;
  /**
   * NTRP 레벨 (1.0-7.0)
   * @minimum 1
   * @maximum 7
   */
  ntrp?: number;
  /**
   * 테니스 구력 (년)
   * @minimum 0
   * @maximum 50
   */
  experience_years?: number;
  /** 선호하는 플레이 스타일 */
  favorite_style?: string;
  /** 받은 리뷰 총 개수 */
  total_reviews?: number;
  /** 긍정적 리뷰 수 */
  positive_reviews?: number;
  /** 부정적 리뷰 수 */
  negative_reviews?: number;
  /** 리뷰 기반 평균 NTRP */
  review_ntrp?: number;
}

export type UserProfileStats = {
  /** 총 경기 수 */
  totalMatches: number;
  /** 승리 수 */
  wins: number;
  /** 패배 수 */
  losses: number;
  /** 승률 (%) */
  winRate: number;
  /** 전체 랭킹 */
  ranking?: number;
};

export type UserProfileReviews = {
  /** 받은 리뷰 총 개수 */
  totalReviews?: number;
  /** 긍정적 리뷰 수 */
  positiveReviews?: number;
  /** 부정적 리뷰 수 */
  negativeReviews?: number;
  /** 평균 평점 */
  avgRating?: number;
};

export interface UserProfile {
  userInfo?: User;
  stats?: UserProfileStats;
  reviews?: UserProfileReviews;
}

/**
 * 경기 유형
 */
export type MatchGameType = (typeof MatchGameType)[keyof typeof MatchGameType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MatchGameType = {
  단식: "단식",
  남복: "남복",
  여복: "여복",
  혼복: "혼복",
} as const;

/**
 * 매치 상태 (recruiting: 모집중, full: 마감, confirmed: 확정, completed: 완료, cancelled: 취소)
 */
export type MatchStatus = (typeof MatchStatus)[keyof typeof MatchStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MatchStatus = {
  recruiting: "recruiting",
  full: "full",
  confirmed: "confirmed",
  completed: "completed",
  cancelled: "cancelled",
} as const;

export type MatchConfirmedParticipantsItem = {
  /** 참가자 ID */
  id?: string;
  /** 참가자 이름 */
  name?: string;
  /** 참가자 NTRP 레벨 */
  ntrp?: string;
  /** 참가자 구력 */
  experience?: string;
  /** 호스트 여부 */
  isHost?: boolean;
};

export interface Match {
  /** 매치 고유 ID */
  id: string;
  /**
   * 매치 제목
   * @maxLength 100
   */
  title: string;
  /** 테니스장 이름 */
  location: string;
  /** 코트 번호/이름 */
  court: string;
  /** 테니스장 주소 */
  address?: string;
  /** 경기 날짜 (MM/DD 형식) */
  date: string;
  /**
   * 시작 시간 (HH:MM)
   * @pattern ^([01]\d|2[0-3]):([0-5]\d)$
   */
  startTime: string;
  /**
   * 종료 시간 (HH:MM)
   * @pattern ^([01]\d|2[0-3]):([0-5]\d)$
   */
  endTime: string;
  /** 참가자 현황 (현재/최대) */
  participants?: string;
  /** 경기 유형 */
  gameType: MatchGameType;
  /** 레벨 (초급/초중급/중급/중상급/상급) */
  level?: string;
  /** 참가비 (무료 또는 금액) */
  price?: string;
  /** 매치 상태 (recruiting: 모집중, full: 마감, confirmed: 확정, completed: 완료, cancelled: 취소) */
  status: MatchStatus;
  /** 호스트 이름 */
  hostName?: string;
  /** 호스트 사용자 ID */
  hostId?: string;
  /** 호스트 NTRP 레벨 */
  hostNtrp?: string;
  /** 호스트 구력 */
  hostExperience?: string;
  /**
   * 매치 설명
   * @maxLength 1000
   */
  description?: string;
  /** 사용자 위치로부터의 거리 */
  distance?: string;
  /** 매치 규칙/주의사항 */
  rules?: string[];
  /** 필요 장비 목록 */
  equipment?: string[];
  /** 주차 정보 */
  parking?: string;
  /** 편의시설 목록 */
  amenities?: string[];
  /** 확정된 참가자 목록 */
  confirmedParticipants?: MatchConfirmedParticipantsItem[];
}

/**
 * 게임 유형 (필수) - singles: 단식, mens_doubles: 남복, womens_doubles: 여복, mixed_doubles: 혼복
 */
export type CreateMatchRequestGameType =
  (typeof CreateMatchRequestGameType)[keyof typeof CreateMatchRequestGameType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMatchRequestGameType = {
  singles: "singles",
  mens_doubles: "mens_doubles",
  womens_doubles: "womens_doubles",
  mixed_doubles: "mixed_doubles",
} as const;

export interface CreateMatchRequest {
  /**
   * 매치 제목 (필수, 1-100자)
   * @minLength 1
   * @maxLength 100
   */
  title: string;
  /**
   * 매치 상세 설명 (선택, 최대 1000자)
   * @maxLength 1000
   */
  description?: string;
  /** 게임 유형 (필수) - singles: 단식, mens_doubles: 남복, womens_doubles: 여복, mixed_doubles: 혼복 */
  game_type: CreateMatchRequestGameType;
  /** 테니스장 ID (필수, UUID 형식) */
  venue_id: string;
  /**
   * 코트 번호/이름 (필수, 1-50자)
   * @minLength 1
   * @maxLength 50
   */
  court: string;
  /** 경기 날짜 (필수, YYYY-MM-DD 형식) */
  match_date: string;
  /**
   * 시작 시간 (필수, HH:MM 형식)
   * @pattern ^([01]\d|2[0-3]):([0-5]\d)$
   */
  start_time: string;
  /**
   * 종료 시간 (필수, HH:MM 형식)
   * @pattern ^([01]\d|2[0-3]):([0-5]\d)$
   */
  end_time: string;
  /**
   * 최대 참가자 수 (필수, 2-8명)
   * @minimum 2
   * @maximum 8
   */
  max_participants: number;
  /**
   * 모집 최소 NTRP 레벨 (선택, 1.0-7.0)
   * @minimum 1
   * @maximum 7
   */
  recruit_ntrp_min?: number;
  /**
   * 모집 최대 NTRP 레벨 (선택, 1.0-7.0)
   * @minimum 1
   * @maximum 7
   */
  recruit_ntrp_max?: number;
  /**
   * 모집 최소 구력 (선택, 년 단위)
   * @minimum 0
   */
  recruit_experience_min?: number;
  /**
   * 모집 최대 구력 (선택, 년 단위)
   * @minimum 0
   */
  recruit_experience_max?: number;
  /**
   * 참가비 (선택, 원 단위, 0=무료)
   * @minimum 0
   */
  price?: number;
  /**
   * 매치 규칙 (선택, 최대 10개, 각 200자 이내)
   * @maxItems 10
   */
  rules?: string[];
  /**
   * 필요 장비 목록 (선택, 최대 20개)
   * @maxItems 20
   */
  equipment?: string[];
  /**
   * 주차 정보 (선택, 최대 200자)
   * @maxLength 200
   */
  parking_info?: string;
}

export interface JoinMatchRequest {
  /**
   * 참가 신청 메시지 (선택, 최대 500자)
   * @maxLength 500
   */
  message?: string;
}

export interface LoginRequest {
  /** 이메일 주소 (필수) */
  email: string;
  /**
   * 비밀번호 (필수, 최소 6자)
   * @minLength 6
   */
  password: string;
}

export interface SignupRequest {
  /** 이메일 주소 (필수) */
  email: string;
  /**
   * 비밀번호 (필수, 최소 6자)
   * @minLength 6
   */
  password: string;
  /**
   * 실명 (필수, 1-50자)
   * @minLength 1
   * @maxLength 50
   */
  name: string;
}

export type LoginResponseData = {
  /** JWT 액세스 토큰 */
  accessToken: string;
  /** JWT 리프레시 토큰 */
  refreshToken: string;
  user: User;
};

export interface LoginResponse {
  success?: boolean;
  data?: LoginResponseData;
}

export interface RefreshTokenRequest {
  /** 리프레시 토큰 (필수) */
  refreshToken: string;
}

export interface KakaoLoginRequest {
  /** 카카오 OAuth 인증 코드 (필수) */
  code: string;
}

/**
 * 지역 유형 (city: 시, province: 도, district: 구/군)
 */
export type RegionType = (typeof RegionType)[keyof typeof RegionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegionType = {
  city: "city",
  province: "province",
  district: "district",
} as const;

/**
 * 하위 시/구 목록 (도의 경우)
 */
export type RegionDistrictsOneOf = { [key: string]: string[] };

export type RegionDistricts = string[] | RegionDistrictsOneOf;

export interface Region {
  /** 지역 ID */
  id?: string;
  /** 지역명 */
  name?: string;
  /** 지역 유형 (city: 시, province: 도, district: 구/군) */
  type?: RegionType;
  districts?: RegionDistricts;
}

/**
 * 운영 시간
 */
export type VenueOperatingHours = { [key: string]: string };

export interface Venue {
  /** 테니스장 ID */
  id: string;
  /** 테니스장 이름 */
  name: string;
  /** 테니스장 주소 */
  address: string;
  /** 코트 목록 */
  courts?: string[];
  /** 편의시설 목록 */
  amenities?: string[];
  /** 가격대 정보 */
  priceRange?: string;
  /** 연락처 */
  phone?: string;
  /** 웹사이트 URL */
  website?: string;
  /** 운영 시간 */
  operatingHours?: VenueOperatingHours;
  /** 사용자 위치로부터의 거리 (근처 검색 시) */
  distance?: string;
}

export type HomeResponseUser = {
  /** 사용자 이름 */
  name: string;
  /** 시간대별 인사말 */
  greeting: string;
  /** 동기부여 메시지 */
  motivationMessage: string;
};

export interface HomeResponse {
  user?: HomeResponseUser;
  /** 다가오는 매치 목록 */
  upcomingMatches?: Match[];
}

/**
 * 게시글 카테고리
 */
export type PostCategory = (typeof PostCategory)[keyof typeof PostCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostCategory = {
  free: "free",
  tips: "tips",
  equipment: "equipment",
  match: "match",
  question: "question",
  announcement: "announcement",
} as const;

export type PostAuthor = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

export interface Post {
  /** 게시글 ID */
  id: string;
  /** 게시글 제목 */
  title: string;
  /** 게시글 내용 */
  content: string;
  /** 게시글 카테고리 */
  category: PostCategory;
  /** 첨부 이미지 URL 목록 */
  images?: string[];
  /** 좋아요 수 */
  likes_count?: number;
  /** 댓글 수 */
  comments_count?: number;
  /** 조회수 */
  views_count?: number;
  /** 생성일시 */
  created_at: string;
  author?: PostAuthor;
}

export type PostDetailAllOf = {
  /** 현재 사용자의 좋아요 여부 */
  isLiked?: boolean;
};

export type PostDetail = Post & PostDetailAllOf;

/**
 * 게시글 카테고리 (필수)
 */
export type CreatePostRequestCategory =
  (typeof CreatePostRequestCategory)[keyof typeof CreatePostRequestCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePostRequestCategory = {
  free: "free",
  tips: "tips",
  equipment: "equipment",
  match: "match",
  question: "question",
  announcement: "announcement",
} as const;

export interface CreatePostRequest {
  /**
   * 게시글 제목 (필수, 1-200자)
   * @minLength 1
   * @maxLength 200
   */
  title: string;
  /**
   * 게시글 내용 (필수, 1-5000자)
   * @minLength 1
   * @maxLength 5000
   */
  content: string;
  /** 게시글 카테고리 (필수) */
  category: CreatePostRequestCategory;
  /**
   * 첨부 이미지 URL 목록 (선택, 최대 10개)
   * @maxItems 10
   */
  images?: string[];
}

export interface UpdatePostRequest {
  /**
   * 게시글 제목 (선택)
   * @minLength 1
   * @maxLength 200
   */
  title?: string;
  /**
   * 게시글 내용 (선택)
   * @minLength 1
   * @maxLength 5000
   */
  content?: string;
  /**
   * 첨부 이미지 URL 목록 (선택)
   * @maxItems 10
   */
  images?: string[];
}

export type CommentAuthor = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

export interface Comment {
  /** 댓글 ID */
  id: string;
  /** 댓글 내용 */
  content: string;
  /** 좋아요 수 */
  likes_count?: number;
  /** 생성일시 */
  created_at: string;
  author?: CommentAuthor;
  /** 대댓글 목록 */
  replies?: Comment[];
}

export interface CreateCommentRequest {
  /**
   * 댓글 내용 (필수, 1-1000자)
   * @minLength 1
   * @maxLength 1000
   */
  content: string;
  /** 부모 댓글 ID (대댓글인 경우, 선택) */
  parent_id?: string;
}

export interface UpdateProfileRequest {
  /**
   * 실명 (선택, 1-50자)
   * @minLength 1
   * @maxLength 50
   */
  name?: string;
  /**
   * 닉네임 (선택, 2-20자, 고유값)
   * @minLength 2
   * @maxLength 20
   */
  nickname?: string;
  /**
   * 활동 지역 (선택, 최대 100자)
   * @maxLength 100
   */
  location?: string;
  /**
   * 자기소개 (선택, 최대 500자)
   * @maxLength 500
   */
  bio?: string;
  /** 프로필 이미지 URL (선택) */
  profile_image_url?: string;
  /**
   * NTRP 레벨 (선택, 1.0-7.0)
   * @minimum 1
   * @maximum 7
   */
  ntrp?: number;
  /**
   * 테니스 구력 (선택, 년 단위, 0-50)
   * @minimum 0
   * @maximum 50
   */
  experience_years?: number;
  /**
   * 선호하는 플레이 스타일 (선택)
   * @maxLength 100
   */
  favorite_style?: string;
  /**
   * 키 (선택, cm 단위)
   * @minimum 100
   * @maximum 250
   */
  height?: number;
  /**
   * 몸무게 (선택, kg 단위)
   * @minimum 30
   * @maximum 200
   */
  weight?: number;
  /**
   * 전화번호 (선택)
   * @maxLength 20
   */
  phone?: string;
}

/**
 * 참가 상태
 */
export type MatchParticipationStatus =
  (typeof MatchParticipationStatus)[keyof typeof MatchParticipationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MatchParticipationStatus = {
  pending: "pending",
  confirmed: "confirmed",
  cancelled: "cancelled",
} as const;

export interface MatchParticipation {
  /** 참가 기록 ID */
  id?: string;
  /** 참가 상태 */
  status?: MatchParticipationStatus;
  /** 참가 신청일시 */
  joined_at?: string;
  match?: Match;
}

export interface ReviewableMatch {
  /** 매치 ID */
  id: string;
  /** 매치 제목 */
  title: string;
  /** 매치 날짜 */
  matchDate: string;
  /** 코트 이름 */
  location: string;
  /** 코트 주소 */
  address?: string;
  /** 경기 형태 */
  gameType: string;
  /** 참가자 목록 */
  participants: ReviewableParticipant[];
}

export interface ReviewableParticipant {
  /** 사용자 ID */
  id: string;
  /** 사용자 이름 */
  name: string;
  /** 사용자 닉네임 */
  nickname?: string;
  /**
   * NTRP 레벨
   * @minimum 1
   * @maximum 7
   */
  ntrp: number;
  /** 이미 리뷰했는지 여부 */
  hasReviewed: boolean;
}

export interface SubmitReviewRequest {
  /** 리뷰 대상자 ID */
  revieweeId: string;
  /**
   * NTRP 레벨 평가 (0.5 단위)
   * @minimum 1
   * @maximum 7
   */
  ntrp: number;
  /** 긍정적 리뷰 여부 (true: 좋아요, false: 싫어요) */
  isPositive: boolean;
  /**
   * 리뷰 코멘트 (선택사항)
   * @maxLength 500
   */
  comment?: string;
}

export type ReviewMatch = {
  id?: string;
  title?: string;
  match_date?: string;
};

export type ReviewReviewer = {
  id?: string;
  nickname?: string;
  name?: string;
  /** 프로필 이미지 URL */
  profile_image_url?: string;
};

export interface Review {
  /** 리뷰 ID */
  id?: string;
  /**
   * 평점 (1-5)
   * @minimum 1
   * @maximum 5
   */
  rating?: number;
  /** 리뷰 내용 */
  comment?: string;
  /** 작성일시 */
  created_at?: string;
  match?: ReviewMatch;
  reviewer?: ReviewReviewer;
}

export interface UserReviewsResponse {
  success?: boolean;
  /** 사용자가 받은 리뷰 목록 */
  data?: Review[];
  pagination?: PaginationInfo;
}

export interface MatchBookmark {
  /** 북마크 ID */
  id?: string;
  /** 북마크 생성일시 */
  created_at?: string;
  match?: Match;
}

/**
 * 알림 유형
 */
export type NotificationType =
  (typeof NotificationType)[keyof typeof NotificationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationType = {
  match: "match",
  chat: "chat",
  community: "community",
  system: "system",
  marketing: "marketing",
} as const;

/**
 * 알림 관련 추가 데이터 (JSON 객체)
 */
export type NotificationActionData = { [key: string]: unknown };

export interface Notification {
  /** 알림 ID */
  id: string;
  /** 알림 유형 */
  type: NotificationType;
  /** 알림 제목 */
  title: string;
  /** 알림 내용 */
  message: string;
  /** 알림 관련 추가 데이터 (JSON 객체) */
  action_data?: NotificationActionData;
  /** 관련 게시글 ID (커뮤니티 알림인 경우) */
  post_id?: string;
  /** 관련 매치 ID (매치 알림인 경우) */
  match_id?: string;
  /** 관련 채팅방 ID (채팅 알림인 경우) */
  chat_room_id?: string;
  /** 읽음 여부 */
  is_read: boolean;
  /** 알림 생성일시 */
  created_at: string;
}

/**
 * 디바이스 유형 (선택, 기본값: web)
 */
export type UpdateFcmTokenRequestDeviceType =
  (typeof UpdateFcmTokenRequestDeviceType)[keyof typeof UpdateFcmTokenRequestDeviceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFcmTokenRequestDeviceType = {
  ios: "ios",
  android: "android",
  web: "web",
} as const;

/**
 * 디바이스 추가 정보 (선택)
 */
export type UpdateFcmTokenRequestDeviceInfo = {
  /** 브라우저 User Agent */
  userAgent?: string;
  /** 플랫폼 정보 */
  platform?: string;
  /** 언어 설정 */
  language?: string;
};

export interface UpdateFcmTokenRequest {
  /**
   * Firebase Cloud Messaging 토큰 (필수)
   * @minLength 1
   */
  fcmToken: string;
  /** 디바이스 유형 (선택, 기본값: web) */
  deviceType?: UpdateFcmTokenRequestDeviceType;
  /** 디바이스 추가 정보 (선택) */
  deviceInfo?: UpdateFcmTokenRequestDeviceInfo;
}

export interface NotificationSettings {
  /** 푸시 알림 전체 활성화 여부 */
  push_enabled?: boolean;
  /** 매치 관련 알림 활성화 여부 (참가 승인/거부, 매치 시작 등) */
  match_notifications?: boolean;
  /** 채팅 메시지 알림 활성화 여부 */
  chat_notifications?: boolean;
  /** 커뮤니티 알림 활성화 여부 (게시글 좋아요, 댓글, 대댓글) */
  community_notifications?: boolean;
  /** 마케팅 및 프로모션 알림 활성화 여부 */
  marketing_notifications?: boolean;
}

export interface UpdateNotificationSettingsRequest {
  /** 푸시 알림 전체 활성화 여부 (선택) */
  push_enabled?: boolean;
  /** 매치 관련 알림 활성화 여부 (선택) - 참가 승인/거부, 매치 시작 등 */
  match_notifications?: boolean;
  /** 채팅 메시지 알림 활성화 여부 (선택) */
  chat_notifications?: boolean;
  /** 커뮤니티 알림 활성화 여부 (선택) - 게시글 좋아요, 댓글, 대댓글 */
  community_notifications?: boolean;
  /** 마케팅 및 프로모션 알림 활성화 여부 (선택) */
  marketing_notifications?: boolean;
}

/**
 * 채팅방 유형
 */
export type ChatRoomType = (typeof ChatRoomType)[keyof typeof ChatRoomType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChatRoomType = {
  private: "private",
  match: "match",
} as const;

/**
 * 매치 채팅방인 경우 매치 정보
 */
export type ChatRoomMatch = {
  id?: string;
  title?: string;
  match_date?: string;
};

/**
 * 매치 채팅방인 경우 호스트 정보
 */
export type ChatRoomHost = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

/**
 * 1:1 채팅방인 경우 상대방 정보
 */
export type ChatRoomOtherParticipant = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

export interface ChatRoom {
  /** 채팅방 ID */
  id: string;
  /** 채팅방 이름 */
  name?: string;
  /** 채팅방 유형 */
  type: ChatRoomType;
  /** 매치 채팅방인 경우 매치 정보 */
  match?: ChatRoomMatch;
  /** 매치 채팅방인 경우 호스트 정보 */
  host?: ChatRoomHost;
  /** 1:1 채팅방인 경우 상대방 정보 */
  otherParticipant?: ChatRoomOtherParticipant;
  lastMessage?: ChatMessage;
  /** 읽지 않은 메시지 수 */
  unreadCount?: number;
  /** 마지막 업데이트 일시 */
  updatedAt?: string;
}

export type ChatRoomDetailAllOfParticipantsItemUser = {
  id?: string;
  nickname?: string;
  profile_image?: string;
};

export type ChatRoomDetailAllOfParticipantsItem = {
  user?: ChatRoomDetailAllOfParticipantsItemUser;
  /** 채팅방 참가일시 */
  joined_at?: string;
};

export type ChatRoomDetailAllOf = {
  /** 채팅방 참가자 목록 */
  participants?: ChatRoomDetailAllOfParticipantsItem[];
};

export type ChatRoomDetail = ChatRoom & ChatRoomDetailAllOf;

/**
 * 채팅방 유형 (필수)
 */
export type CreateChatRoomRequestType =
  (typeof CreateChatRoomRequestType)[keyof typeof CreateChatRoomRequestType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateChatRoomRequestType = {
  private: "private",
  match: "match",
} as const;

export interface CreateChatRoomRequest {
  /** 채팅방 유형 (필수) */
  type: CreateChatRoomRequestType;
  /**
   * 참가자 ID 목록 (1:1 채팅의 경우 필수)
   * @minItems 1
   */
  participant_ids?: string[];
  /** 매치 ID (매치 채팅방의 경우 필수) */
  match_id?: string;
  /**
   * 채팅방 이름 (선택)
   * @maxLength 100
   */
  name?: string;
}

/**
 * 메시지 유형
 */
export type ChatMessageMessageType =
  (typeof ChatMessageMessageType)[keyof typeof ChatMessageMessageType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChatMessageMessageType = {
  text: "text",
  image: "image",
  system: "system",
} as const;

/**
 * 메시지 발신자 정보
 */
export type ChatMessageSender = {
  id?: string;
  nickname?: string;
  profile_image_url?: string;
};

export type ChatMessageReplyMessageContentOneOfType =
  (typeof ChatMessageReplyMessageContentOneOfType)[keyof typeof ChatMessageReplyMessageContentOneOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChatMessageReplyMessageContentOneOfType = {
  approve_request: "approve_request",
  cancel_approval: "cancel_approval",
} as const;

export type ChatMessageReplyMessageContentOneOf = {
  participantId: string;
  participantName: string;
  type: ChatMessageReplyMessageContentOneOfType;
};

export type ChatMessageReplyMessageContent =
  | string
  | ChatMessageReplyMessageContentOneOf;

export type ChatMessageReplyMessageSender = {
  nickname?: string;
};

/**
 * 답글 대상 메시지 정보
 */
export type ChatMessageReplyMessage = {
  id?: string;
  content?: ChatMessageReplyMessageContent;
  sender?: ChatMessageReplyMessageSender;
};

export interface ChatMessage {
  /** 메시지 ID */
  id: string;
  /** 메시지 내용 */
  content: string;
  /** 메시지 유형 */
  message_type: ChatMessageMessageType;
  /** 메시지 생성일시 */
  created_at: string;
  /** 답글 대상 메시지 ID */
  reply_to?: string;
  /** 메시지 발신자 정보 */
  sender?: ChatMessageSender;
  /** 답글 대상 메시지 정보 */
  reply_message?: ChatMessageReplyMessage;
}

/**
 * 메시지 유형 (기본값: text)
 */
export type SendMessageRequestMessageType =
  (typeof SendMessageRequestMessageType)[keyof typeof SendMessageRequestMessageType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SendMessageRequestMessageType = {
  text: "text",
  image: "image",
  system: "system",
} as const;

export interface SendMessageRequest {
  /**
   * 메시지 내용 (필수, 1-1000자)
   * @minLength 1
   * @maxLength 1000
   */
  content: string;
  /** 메시지 유형 (기본값: text) */
  message_type?: SendMessageRequestMessageType;
  /** 답글 대상 메시지 ID (선택) */
  reply_to?: string;
}

/**
 * **알림 개수 조회 API 가이드**

이 서비스는 3가지 알림 개수 조회 API를 제공합니다:

1. **전체 알림 개수** (`/api/notifications/unread-count`)
   - 모든 타입의 읽지 않은 알림 개수
   - 사용처: 앱 아이콘 배지, 전체 알림 표시

2. **채팅 메시지 개수** (`/api/notifications/unread-chat-count`)
   - 실제 채팅 메시지의 읽지 않은 개수
   - 사용처: 채팅 탭 배지, 채팅 아이콘 표시
   - 주의: 알림이 아닌 실제 메시지 테이블에서 계산

3. **타입별 알림 개수** (`/api/notifications/unread-count-by-type`)
   - 채팅 알림 vs 게시판 알림으로 구분
   - 사용처: 탭별 개별 배지, 세분화된 알림 관리

**채팅 메시지 vs 채팅 알림의 차이:**
- 채팅 메시지: 실제 채팅방의 메시지 (messages 테이블)
- 채팅 알림: 푸시 알림용 레코드 (notifications 테이블, type='chat')

 */
export interface NotificationCountSummary {
  [key: string]: unknown;
}

export type GetApiAuthMe200Data = {
  id?: string;
  email?: string;
  name?: string;
  nickname?: string;
  location?: string;
  bio?: string;
  profile_image_url?: string;
  ntrp?: number;
  experience_years?: number;
  favorite_style?: string;
  created_at?: string;
  total_matches?: number;
  wins?: number;
  losses?: number;
  win_rate?: number;
  total_reviews?: number;
  positive_reviews?: number;
  negative_reviews?: number;
  /** 리뷰 기반 NTRP 평균 */
  review_ntrp?: number;
};

export type GetApiAuthMe200 = {
  success?: boolean;
  data?: GetApiAuthMe200Data;
};

export type GetApiChatRoomsParams = {
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 50
   */
  limit?: number;
};

export type GetApiChatRooms200 = {
  success?: boolean;
  data?: ChatRoom[];
  pagination?: PaginationInfo;
};

export type PostApiChatRooms201Data = {
  id?: string;
  message?: string;
};

export type PostApiChatRooms201 = {
  success?: boolean;
  data?: PostApiChatRooms201Data;
};

export type GetApiChatRoomsChatRoomId200 = {
  success?: boolean;
  data?: ChatRoomDetail;
};

export type DeleteApiChatRoomsChatRoomId200Data = {
  message?: string;
  /** 삭제된 채팅방 ID */
  roomId?: string;
};

export type DeleteApiChatRoomsChatRoomId200 = {
  success?: boolean;
  data?: DeleteApiChatRoomsChatRoomId200Data;
};

export type GetApiChatRoomsChatRoomIdMessagesParams = {
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * 특정 메시지 ID 이전 메시지 조회 (무한 스크롤용)
   */
  before?: string;
};

export type GetApiChatRoomsChatRoomIdMessages200 = {
  success?: boolean;
  data?: ChatMessage[];
  pagination?: PaginationInfo;
};

export type PostApiChatRoomsChatRoomIdMessages201 = {
  success?: boolean;
  data?: ChatMessage;
};

export type GetApiChatRoomsChatRoomIdMessagesAll200 = {
  success?: boolean;
  data?: ChatMessage[];
};

export type PostApiChatRoomsChatRoomIdReadBody = {
  /** 마지막으로 읽은 메시지 ID */
  messageId: string;
};

export type PostApiChatRoomsChatRoomIdApprove200Data = {
  message?: string;
  /** 승인된 참가자의 사용자 ID */
  participantId?: string;
  /** 관련 매치 ID */
  matchId?: string;
};

export type PostApiChatRoomsChatRoomIdApprove200 = {
  success?: boolean;
  data?: PostApiChatRoomsChatRoomIdApprove200Data;
};

export type PostApiChatRoomsChatRoomIdCancelApproval200Data = {
  message?: string;
  /** 취소된 참가자의 사용자 ID */
  participantId?: string;
  /** 관련 매치 ID */
  matchId?: string;
};

export type PostApiChatRoomsChatRoomIdCancelApproval200 = {
  success?: boolean;
  data?: PostApiChatRoomsChatRoomIdCancelApproval200Data;
};

export type GetApiCommunityPostsParams = {
  /**
   * 카테고리 필터 (all=전체, free=자유게시판, tips=팁/기술, equipment=장비, match=경기후기, question=질문, announcement=공지사항)
   */
  category?: GetApiCommunityPostsCategory;
  /**
   * 검색어 (제목, 내용 검색)
   */
  search?: string;
  /**
   * 정렬 방식
   */
  sort?: GetApiCommunityPostsSort;
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 50
   */
  limit?: number;
};

export type GetApiCommunityPostsCategory =
  (typeof GetApiCommunityPostsCategory)[keyof typeof GetApiCommunityPostsCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiCommunityPostsCategory = {
  all: "all",
  free: "free",
  tips: "tips",
  equipment: "equipment",
  match: "match",
  question: "question",
  announcement: "announcement",
} as const;

export type GetApiCommunityPostsSort =
  (typeof GetApiCommunityPostsSort)[keyof typeof GetApiCommunityPostsSort];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiCommunityPostsSort = {
  latest: "latest",
  popular: "popular",
  comments: "comments",
} as const;

export type GetApiCommunityPosts200 = {
  success?: boolean;
  data?: Post[];
  pagination?: PaginationInfo;
};

export type PostApiCommunityPosts201Data = {
  id?: string;
  message?: string;
};

export type PostApiCommunityPosts201 = {
  success?: boolean;
  data?: PostApiCommunityPosts201Data;
};

export type GetApiCommunityPostsPostId200 = {
  success?: boolean;
  data?: PostDetail;
};

export type GetApiCommunityPostsPostIdCommentsParams = {
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
};

export type GetApiCommunityPostsPostIdComments200 = {
  success?: boolean;
  data?: Comment[];
  pagination?: PaginationInfo;
};

export type PostApiCommunityPostsPostIdComments201Data = {
  id?: string;
  message?: string;
};

export type PostApiCommunityPostsPostIdComments201 = {
  success?: boolean;
  data?: PostApiCommunityPostsPostIdComments201Data;
};

export type GetApiHome200 = {
  success?: boolean;
  data?: HomeResponse;
};

export type GetApiMatchesParams = {
  /**
   * 검색어
   */
  search?: string;
  /**
   * 지역 필터
   */
  region?: string;
  /**
   * 게임 유형
   */
  game_type?: GetApiMatchesGameType;
  /**
   * 날짜 (YYYY-MM-DD)
   */
  date?: string;
  /**
   * 최소 NTRP 레벨
   * @minimum 1
   * @maximum 7
   */
  ntrp_min?: number;
  /**
   * 최대 NTRP 레벨
   * @minimum 1
   * @maximum 7
   */
  ntrp_max?: number;
  /**
   * 최소 구력 (년)
   * @minimum 0
   */
  experience_min?: number;
  /**
   * 최대 구력 (년)
   * @minimum 0
   */
  experience_max?: number;
  /**
   * 정렬 기준 (latest=최신순, distance=거리순, price=가격순)
   */
  sort?: GetApiMatchesSort;
  /**
   * 사용자 위도 (거리순 정렬 시 필수)
   * @minimum -90
   * @maximum 90
   */
  user_lat?: number;
  /**
   * 사용자 경도 (거리순 정렬 시 필수)
   * @minimum -180
   * @maximum 180
   */
  user_lng?: number;
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
};

export type GetApiMatchesGameType =
  (typeof GetApiMatchesGameType)[keyof typeof GetApiMatchesGameType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMatchesGameType = {
  singles: "singles",
  mens_doubles: "mens_doubles",
  womens_doubles: "womens_doubles",
  mixed_doubles: "mixed_doubles",
} as const;

export type GetApiMatchesSort =
  (typeof GetApiMatchesSort)[keyof typeof GetApiMatchesSort];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMatchesSort = {
  latest: "latest",
  distance: "distance",
  price: "price",
} as const;

export type GetApiMatches200DataItem = {
  id?: string;
  title?: string;
  location?: string;
  court?: string;
  date?: string;
  startTime?: string;
  endTime?: string;
  participants?: string;
  gameType?: string;
  level?: string;
  price?: string;
  status?: string;
  hostName?: string;
  /** 호스트 사용자 ID */
  hostId?: string;
  description?: string;
  /**
   * 사용자 위치에서의 거리 (거리순 정렬 시에만 제공)
   * @nullable
   */
  distance?: string | null;
};

export type GetApiMatches200 = {
  success?: boolean;
  data?: GetApiMatches200DataItem[];
  pagination?: PaginationInfo;
};

export type PostApiMatches201Data = {
  id?: string;
  message?: string;
};

export type PostApiMatches201 = {
  success?: boolean;
  data?: PostApiMatches201Data;
};

export type GetApiMatchesMatchId200 = {
  success?: boolean;
  data?: Match;
};

export type PostApiMatchesMatchIdShare200Data = {
  /** 공유 URL */
  shareUrl?: string;
  message?: string;
};

export type PostApiMatchesMatchIdShare200 = {
  success?: boolean;
  data?: PostApiMatchesMatchIdShare200Data;
};

export type PostApiMatchesMatchIdChat201Data = {
  /** 채팅방 ID */
  chatRoomId?: string;
  message?: string;
};

export type PostApiMatchesMatchIdChat201 = {
  success?: boolean;
  data?: PostApiMatchesMatchIdChat201Data;
};

export type PostApiMatchesMatchIdChatPrivate201Data = {
  /** 채팅방 ID */
  chatRoomId?: string;
  message?: string;
};

export type PostApiMatchesMatchIdChatPrivate201 = {
  success?: boolean;
  data?: PostApiMatchesMatchIdChatPrivate201Data;
};

export type GetApiNotificationsParams = {
  /**
 * 알림 타입 필터
- `all`: 모든 알림
- `match`: 매치 관련 알림만
- `chat`: 채팅 알림만
- `community`: 커뮤니티 알림만 (좋아요, 댓글, 대댓글)
- `system`: 시스템 알림만

 */
  type?: GetApiNotificationsType;
  /**
   * 읽지 않은 알림만 조회
   */
  unread_only?: GetApiNotificationsUnreadOnly;
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
};

export type GetApiNotificationsType =
  (typeof GetApiNotificationsType)[keyof typeof GetApiNotificationsType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsType = {
  all: "all",
  match: "match",
  chat: "chat",
  community: "community",
  system: "system",
} as const;

export type GetApiNotificationsUnreadOnly =
  (typeof GetApiNotificationsUnreadOnly)[keyof typeof GetApiNotificationsUnreadOnly];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsUnreadOnly = {
  true: true,
  false: false,
} as const;

export type GetApiNotifications200 = {
  success?: boolean;
  data?: Notification[];
  pagination?: PaginationInfo;
};

export type GetApiNotificationsUnreadCount200Data = {
  /** 전체 읽지 않은 알림 개수 (채팅 + 게시판 알림) */
  unreadCount?: number;
};

export type GetApiNotificationsUnreadCount200 = {
  success?: boolean;
  data?: GetApiNotificationsUnreadCount200Data;
};

export type GetApiNotificationsUnreadChatCount200Data = {
  /** 읽지 않은 채팅 메시지 개수 */
  count?: number;
};

export type GetApiNotificationsUnreadChatCount200 = {
  success?: boolean;
  data?: GetApiNotificationsUnreadChatCount200Data;
};

export type GetApiNotificationsUnreadCountByType200Data = {
  /** 전체 읽지 않은 알림 개수 (채팅 + 게시판) */
  totalCount?: number;
  /** 채팅 알림 개수 (type = 'chat') */
  chatNotificationCount?: number;
  /** 게시판 알림 개수 (커뮤니티, 매치, 시스템 등) */
  boardNotificationCount?: number;
};

export type GetApiNotificationsUnreadCountByType200 = {
  success?: boolean;
  data?: GetApiNotificationsUnreadCountByType200Data;
};

export type PostApiNotificationsFcmToken200Data = {
  message?: string;
};

export type PostApiNotificationsFcmToken200 = {
  success?: boolean;
  data?: PostApiNotificationsFcmToken200Data;
};

export type GetApiNotificationsSettings200 = {
  success?: boolean;
  data?: NotificationSettings;
};

export type GetApiProfileMe200 = {
  success?: boolean;
  data?: UserProfile;
};

export type GetApiProfileUsersUserId200 = {
  success?: boolean;
  data?: UserProfile;
};

export type GetApiProfileMyMatchesParams = {
  /**
   * 매치 상태 필터
   */
  status?: GetApiProfileMyMatchesStatus;
  /**
   * 매치 시점 필터
   */
  type?: GetApiProfileMyMatchesType;
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 50
   */
  limit?: number;
};

export type GetApiProfileMyMatchesStatus =
  (typeof GetApiProfileMyMatchesStatus)[keyof typeof GetApiProfileMyMatchesStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiProfileMyMatchesStatus = {
  all: "all",
  pending: "pending",
  confirmed: "confirmed",
  cancelled: "cancelled",
} as const;

export type GetApiProfileMyMatchesType =
  (typeof GetApiProfileMyMatchesType)[keyof typeof GetApiProfileMyMatchesType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiProfileMyMatchesType = {
  all: "all",
  upcoming: "upcoming",
  past: "past",
} as const;

export type GetApiProfileMyMatches200 = {
  success?: boolean;
  data?: MatchParticipation[];
  pagination?: PaginationInfo;
};

export type GetApiProfileMyReviewsParams = {
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 50
   */
  limit?: number;
};

export type GetApiProfileMyReviews200 = {
  success?: boolean;
  data?: Review[];
  pagination?: PaginationInfo;
};

export type GetApiProfileUsersUserIdReviewsParams = {
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 50
   */
  limit?: number;
};

export type GetApiProfileUsersUserIdReviews200 = {
  success?: boolean;
  data?: Review[];
  pagination?: PaginationInfo;
};

export type GetApiProfileBookmarksParams = {
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 50
   */
  limit?: number;
};

export type GetApiProfileBookmarks200 = {
  success?: boolean;
  data?: MatchBookmark[];
  pagination?: PaginationInfo;
};

export type PostApiPushSendBodyDataType =
  (typeof PostApiPushSendBodyDataType)[keyof typeof PostApiPushSendBodyDataType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiPushSendBodyDataType = {
  chat: "chat",
  match: "match",
  community: "community",
  system: "system",
} as const;

/**
 * 추가 데이터
 */
export type PostApiPushSendBodyData = {
  type?: PostApiPushSendBodyDataType;
  targetId?: string;
};

export type PostApiPushSendBody = {
  /** 수신자 사용자 ID */
  userId: string;
  /** 알림 제목 */
  title: string;
  /** 알림 내용 */
  body: string;
  /** 알림 아이콘 URL */
  icon?: string;
  /** 알림 이미지 URL */
  image?: string;
  /** 추가 데이터 */
  data?: PostApiPushSendBodyData;
  /** 클릭 시 이동할 경로 */
  clickAction?: string;
};

export type PostApiPushSend200Data = {
  sent?: boolean;
  message?: string;
};

export type PostApiPushSend200 = {
  success?: boolean;
  data?: PostApiPushSend200Data;
};

export type PostApiPushChatBody = {
  /** 수신자 ID */
  recipientId: string;
  /** 발신자 이름 */
  senderName: string;
  /** 메시지 내용 (미리보기용) */
  message: string;
  /** 채팅방 ID */
  chatRoomId: string;
};

export type PostApiPushMatchApprovalBody = {
  /** 승인받은 사용자 ID */
  userId: string;
  /** 매치 제목 */
  matchTitle: string;
  /** 매치 ID */
  matchId: string;
};

export type PostApiPushMatchStartBody = {
  /** 참가자 ID 목록 */
  participants: string[];
  /** 매치 제목 */
  matchTitle: string;
  /** 매치 ID */
  matchId: string;
  /** 시작 시간 */
  startTime: string;
};

/**
 * 알림 타입
 */
export type PostApiPushCommunityBodyType =
  (typeof PostApiPushCommunityBodyType)[keyof typeof PostApiPushCommunityBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiPushCommunityBodyType = {
  comment: "comment",
  like: "like",
} as const;

export type PostApiPushCommunityBody = {
  /** 알림 받을 사용자 ID */
  userId: string;
  /** 알림 타입 */
  type: PostApiPushCommunityBodyType;
  /** 액션을 수행한 사용자 이름 */
  actorName: string;
  /** 게시글 제목 */
  postTitle: string;
  /** 게시글 ID */
  postId: string;
};

export type DeleteApiPushTokenBody = {
  /** 삭제할 FCM 토큰 */
  token: string;
};

export type GetApiRegions200DataRegions = { [key: string]: Region };

export type GetApiRegions200Data = {
  regions?: GetApiRegions200DataRegions;
};

export type GetApiRegions200 = {
  success?: boolean;
  data?: GetApiRegions200Data;
};

export type GetApiReviewsReviewable200 = {
  success?: boolean;
  data?: ReviewableMatch[];
};

/**
 * @nullable
 */
export type PostApiReviewsMatchesMatchId200Data = unknown | null;

export type PostApiReviewsMatchesMatchId200 = {
  success?: boolean;
  /** @nullable */
  data?: PostApiReviewsMatchesMatchId200Data;
  message?: string;
};

export type GetApiReviewsUsersUserId200 = {
  success?: boolean;
  data?: Review[];
};

export type GetApiVenuesParams = {
  /**
   * 검색 키워드 (테니스장 이름, 주소)
   */
  keyword?: string;
  /**
   * 지역 필터
   */
  region?: string;
  /**
   * 구/군 필터
   */
  district?: string;
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
};

export type GetApiVenues200 = {
  success?: boolean;
  data?: Venue[];
  pagination?: PaginationInfo;
};

export type GetApiVenuesAllParams = {
  /**
   * 페이지 번호
   * @minimum 1
   */
  page?: number;
  /**
   * 페이지 크기
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
};

export type GetApiVenuesAll200Data = {
  venues?: Venue[];
  pagination?: PaginationInfo;
};

export type GetApiVenuesAll200 = {
  success?: boolean;
  data?: GetApiVenuesAll200Data;
};

export type GetApiVenuesNearbyParams = {
  /**
   * 위도
   */
  latitude: number;
  /**
   * 경도
   */
  longitude: number;
  /**
   * 반경 (km)
   * @minimum 1
   * @maximum 50
   */
  radius?: number;
  /**
   * 최대 결과 수
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
};

export type GetApiVenuesNearby200DataItemAllOf = {
  /** 현재 위치로부터의 거리 */
  distance?: string;
};

export type GetApiVenuesNearby200DataItem = Venue &
  GetApiVenuesNearby200DataItemAllOf;

export type GetApiVenuesNearby200 = {
  success?: boolean;
  data?: GetApiVenuesNearby200DataItem[];
};

export type GetApiVenuesVenueId200DataAllOf = {
  /** 최근 이 테니스장에서 열린 매치들 */
  recentMatches?: Match[];
  /** 총 매치 수 */
  totalMatches?: number;
};

export type GetApiVenuesVenueId200Data = Venue &
  GetApiVenuesVenueId200DataAllOf;

export type GetApiVenuesVenueId200 = {
  success?: boolean;
  data?: GetApiVenuesVenueId200Data;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getWeHandTennisAPI = () => {
  /**
   * @summary 이메일 로그인
   */
  const postApiAuthLogin = (
    loginRequest: LoginRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<LoginResponse>(
      {
        url: `/api/auth/login`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: loginRequest,
      },
      options
    );
  };

  /**
   * @summary 토큰 갱신
   */
  const postApiAuthRefresh = (
    refreshTokenRequest: RefreshTokenRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<LoginResponse>(
      {
        url: `/api/auth/refresh`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: refreshTokenRequest,
      },
      options
    );
  };

  /**
   * @summary 로그아웃
   */
  const postApiAuthLogout = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/auth/logout`, method: "POST" },
      options
    );
  };

  /**
   * @summary 회원가입
   */
  const postApiAuthSignup = (
    signupRequest: SignupRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<LoginResponse>(
      {
        url: `/api/auth/signup`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: signupRequest,
      },
      options
    );
  };

  /**
   * @summary 현재 사용자 정보 조회
   */
  const getApiAuthMe = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiAuthMe200>(
      { url: `/api/auth/me`, method: "GET" },
      options
    );
  };

  /**
   * @summary 채팅방 목록 조회
   */
  const getApiChatRooms = (
    params?: GetApiChatRoomsParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiChatRooms200>(
      { url: `/api/chat/rooms`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 채팅방 생성
   */
  const postApiChatRooms = (
    createChatRoomRequest: CreateChatRoomRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiChatRooms201>(
      {
        url: `/api/chat/rooms`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createChatRoomRequest,
      },
      options
    );
  };

  /**
   * @summary 채팅방 상세 정보 조회
   */
  const getApiChatRoomsChatRoomId = (
    chatRoomId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiChatRoomsChatRoomId200>(
      { url: `/api/chat/rooms/${chatRoomId}`, method: "GET" },
      options
    );
  };

  /**
   * 채팅방을 삭제합니다. 매치 채팅방의 경우 호스트만 삭제 가능하고, 1:1 채팅방의 경우 참가자 모두 삭제 가능합니다. 실제로는 soft delete로 처리되며, 시스템 메시지가 추가됩니다.
   * @summary 채팅방 삭제
   */
  const deleteApiChatRoomsChatRoomId = (
    chatRoomId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<DeleteApiChatRoomsChatRoomId200>(
      { url: `/api/chat/rooms/${chatRoomId}`, method: "DELETE" },
      options
    );
  };

  /**
   * @summary 메시지 목록 조회
   */
  const getApiChatRoomsChatRoomIdMessages = (
    chatRoomId: string,
    params?: GetApiChatRoomsChatRoomIdMessagesParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiChatRoomsChatRoomIdMessages200>(
      { url: `/api/chat/rooms/${chatRoomId}/messages`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 메시지 전송
   */
  const postApiChatRoomsChatRoomIdMessages = (
    chatRoomId: string,
    sendMessageRequest: SendMessageRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiChatRoomsChatRoomIdMessages201>(
      {
        url: `/api/chat/rooms/${chatRoomId}/messages`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: sendMessageRequest,
      },
      options
    );
  };

  /**
   * @summary 채팅방의 모든 메시지 조회 (페이지네이션 없음)
   */
  const getApiChatRoomsChatRoomIdMessagesAll = (
    chatRoomId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiChatRoomsChatRoomIdMessagesAll200>(
      { url: `/api/chat/rooms/${chatRoomId}/messages/all`, method: "GET" },
      options
    );
  };

  /**
   * @summary 메시지 읽음 처리
   */
  const postApiChatRoomsChatRoomIdRead = (
    chatRoomId: string,
    postApiChatRoomsChatRoomIdReadBody: PostApiChatRoomsChatRoomIdReadBody,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      {
        url: `/api/chat/rooms/${chatRoomId}/read`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postApiChatRoomsChatRoomIdReadBody,
      },
      options
    );
  };

  /**
   * @summary 채팅방 나가기
   */
  const postApiChatRoomsChatRoomIdLeave = (
    chatRoomId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/chat/rooms/${chatRoomId}/leave`, method: "POST" },
      options
    );
  };

  /**
   * @summary 채팅방 참가
   */
  const postApiChatRoomsChatRoomIdJoin = (
    chatRoomId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/chat/rooms/${chatRoomId}/join`, method: "POST" },
      options
    );
  };

  /**
   * 1:1 채팅방에서 매치 호스트가 상대방 참가자를 승인합니다. 채팅방 참가자를 자동으로 식별하므로 별도의 사용자 ID 입력이 불필요합니다.
   * @summary 매치 참가자 승인 (호스트 전용, 1:1 채팅방 기반)
   */
  const postApiChatRoomsChatRoomIdApprove = (
    chatRoomId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiChatRoomsChatRoomIdApprove200>(
      { url: `/api/chat/rooms/${chatRoomId}/approve`, method: "POST" },
      options
    );
  };

  /**
   * 1:1 채팅방에서 매치 호스트가 상대방 참가자의 확정을 취소합니다. 채팅방 참가자를 자동으로 식별하므로 별도의 사용자 ID 입력이 불필요합니다.
   * @summary 매치 참가자 승인 취소 (호스트 전용, 1:1 채팅방 기반)
   */
  const postApiChatRoomsChatRoomIdCancelApproval = (
    chatRoomId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiChatRoomsChatRoomIdCancelApproval200>(
      { url: `/api/chat/rooms/${chatRoomId}/cancel-approval`, method: "POST" },
      options
    );
  };

  /**
   * @summary 게시글 목록 조회
   */
  const getApiCommunityPosts = (
    params?: GetApiCommunityPostsParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiCommunityPosts200>(
      { url: `/api/community/posts`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 게시글 작성
   */
  const postApiCommunityPosts = (
    createPostRequest: CreatePostRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiCommunityPosts201>(
      {
        url: `/api/community/posts`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createPostRequest,
      },
      options
    );
  };

  /**
   * @summary 게시글 상세 조회
   */
  const getApiCommunityPostsPostId = (
    postId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiCommunityPostsPostId200>(
      { url: `/api/community/posts/${postId}`, method: "GET" },
      options
    );
  };

  /**
   * @summary 게시글 수정
   */
  const putApiCommunityPostsPostId = (
    postId: string,
    updatePostRequest: UpdatePostRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      {
        url: `/api/community/posts/${postId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updatePostRequest,
      },
      options
    );
  };

  /**
   * @summary 게시글 삭제
   */
  const deleteApiCommunityPostsPostId = (
    postId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/community/posts/${postId}`, method: "DELETE" },
      options
    );
  };

  /**
 * 게시글에 좋아요를 추가합니다.

**알림 기능:**
- 자신의 게시글이 아닌 경우, 게시글 작성자에게 알림이 발송됩니다.
- 알림 타입: `community`
- 알림 제목: "게시글에 좋아요를 받았습니다"
- 알림 내용: "{닉네임}님이 "{게시글 제목}" 게시글에 좋아요를 눌렀습니다."
- 사용자의 커뮤니티 알림 설정에 따라 발송 여부가 결정됩니다.

 * @summary 게시글 좋아요
 */
  const postApiCommunityPostsPostIdLike = (
    postId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/community/posts/${postId}/like`, method: "POST" },
      options
    );
  };

  /**
   * @summary 게시글 좋아요 취소
   */
  const deleteApiCommunityPostsPostIdLike = (
    postId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/community/posts/${postId}/like`, method: "DELETE" },
      options
    );
  };

  /**
   * @summary 댓글 목록 조회
   */
  const getApiCommunityPostsPostIdComments = (
    postId: string,
    params?: GetApiCommunityPostsPostIdCommentsParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiCommunityPostsPostIdComments200>(
      { url: `/api/community/posts/${postId}/comments`, method: "GET", params },
      options
    );
  };

  /**
 * 게시글에 댓글을 작성합니다. 대댓글 작성도 가능합니다.

**알림 기능:**
- **일반 댓글**: 자신의 게시글이 아닌 경우, 게시글 작성자에게 알림이 발송됩니다.
  - 알림 타입: `community`
  - 알림 제목: "게시글에 댓글이 달렸습니다"
  - 알림 내용: "{닉네임}님이 "{게시글 제목}" 게시글에 댓글을 남겼습니다: "{댓글 내용 50자}""

- **대댓글**: 자신의 댓글이 아닌 경우, 부모 댓글 작성자에게 알림이 발송됩니다.
  - 알림 타입: `community`
  - 알림 제목: "댓글에 답글이 달렸습니다"
  - 알림 내용: "{닉네임}님이 회원님의 댓글에 답글을 남겼습니다: "{답글 내용 50자}""

- 사용자의 커뮤니티 알림 설정에 따라 발송 여부가 결정됩니다.

 * @summary 댓글 작성
 */
  const postApiCommunityPostsPostIdComments = (
    postId: string,
    createCommentRequest: CreateCommentRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiCommunityPostsPostIdComments201>(
      {
        url: `/api/community/posts/${postId}/comments`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createCommentRequest,
      },
      options
    );
  };

  /**
   * @summary 댓글 삭제
   */
  const deleteApiCommunityCommentsCommentId = (
    commentId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/community/comments/${commentId}`, method: "DELETE" },
      options
    );
  };

  /**
   * @summary 홈 화면 데이터 조회
   */
  const getApiHome = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiHome200>(
      { url: `/api/home`, method: "GET" },
      options
    );
  };

  /**
   * @summary 매치 목록 조회 (필터링/검색)
   */
  const getApiMatches = (
    params?: GetApiMatchesParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiMatches200>(
      { url: `/api/matches`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 매치 생성
   */
  const postApiMatches = (
    createMatchRequest: CreateMatchRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiMatches201>(
      {
        url: `/api/matches`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createMatchRequest,
      },
      options
    );
  };

  /**
   * @summary 매치 상세 정보 조회
   */
  const getApiMatchesMatchId = (
    matchId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiMatchesMatchId200>(
      { url: `/api/matches/${matchId}`, method: "GET" },
      options
    );
  };

  /**
   * @summary 매치 참가 신청
   */
  const postApiMatchesMatchIdJoin = (
    matchId: string,
    joinMatchRequest?: JoinMatchRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      {
        url: `/api/matches/${matchId}/join`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: joinMatchRequest,
      },
      options
    );
  };

  /**
   * @summary 매치 공유
   */
  const postApiMatchesMatchIdShare = (
    matchId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiMatchesMatchIdShare200>(
      { url: `/api/matches/${matchId}/share`, method: "POST" },
      options
    );
  };

  /**
   * @summary 매치 북마크 추가
   */
  const postApiMatchesMatchIdBookmark = (
    matchId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/matches/${matchId}/bookmark`, method: "POST" },
      options
    );
  };

  /**
   * @summary 매치 북마크 삭제
   */
  const deleteApiMatchesMatchIdBookmark = (
    matchId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/matches/${matchId}/bookmark`, method: "DELETE" },
      options
    );
  };

  /**
   * @summary 매치 단체 채팅방 생성/참가
   */
  const postApiMatchesMatchIdChat = (
    matchId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiMatchesMatchIdChat201>(
      { url: `/api/matches/${matchId}/chat`, method: "POST" },
      options
    );
  };

  /**
   * @summary 매치 호스트와 1:1 채팅방 생성
   */
  const postApiMatchesMatchIdChatPrivate = (
    matchId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiMatchesMatchIdChatPrivate201>(
      { url: `/api/matches/${matchId}/chat/private`, method: "POST" },
      options
    );
  };

  /**
 * 사용자의 알림 목록을 조회합니다.

**알림 타입별 설명:**
- `match`: 매치 관련 알림 (참가 승인, 거부, 시작 등)
- `chat`: 채팅 메시지 알림
- `community`: 커뮤니티 알림 (게시글 좋아요, 댓글, 대댓글)
- `system`: 시스템 공지사항
- `marketing`: 마케팅 알림

**커뮤니티 알림 종류:**
- 게시글 좋아요: 다른 사용자가 내 게시글에 좋아요를 누른 경우
- 댓글 알림: 다른 사용자가 내 게시글에 댓글을 작성한 경우
- 대댓글 알림: 다른 사용자가 내 댓글에 답글을 작성한 경우

 * @summary 알림 목록 조회
 */
  const getApiNotifications = (
    params?: GetApiNotificationsParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiNotifications200>(
      { url: `/api/notifications`, method: "GET", params },
      options
    );
  };

  /**
 * 사용자의 모든 읽지 않은 알림 개수를 조회합니다.

**포함되는 알림:**
- 채팅 알림 (type: 'chat')
- 게시판 알림 (type: 'community', 'match', 'system' 등)
- 모든 타입의 읽지 않은 알림

**사용 예시:**
- 앱 아이콘에 표시할 전체 배지 개수
- 알림 탭의 총 알림 개수

 * @summary 전체 읽지 않은 알림 개수 조회
 */
  const getApiNotificationsUnreadCount = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiNotificationsUnreadCount200>(
      { url: `/api/notifications/unread-count`, method: "GET" },
      options
    );
  };

  /**
 * 사용자의 모든 채팅방에서 읽지 않은 메시지의 총 개수를 조회합니다.

**계산 방식:**
- 사용자가 참여 중인 모든 활성 채팅방을 조회
- 각 채팅방의 마지막 읽은 메시지(last_read_message_id) 이후의 메시지 개수 계산
- 마지막 읽은 메시지가 없는 경우, 해당 채팅방의 모든 메시지를 읽지 않은 것으로 계산
- 모든 채팅방의 읽지 않은 메시지 개수를 합산

**사용 예시:**
- 채팅 탭에 표시할 배지 개수
- 채팅 아이콘의 읽지 않은 메시지 표시
- 실제 채팅 메시지만 계산 (알림과는 별개)

**주의사항:**
- 이 API는 실제 채팅 메시지 테이블(messages)에서 직접 계산합니다
- 알림 테이블의 채팅 알림과는 다른 개념입니다

 * @summary 읽지 않은 채팅 메시지 개수 조회
 */
  const getApiNotificationsUnreadChatCount = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiNotificationsUnreadChatCount200>(
      { url: `/api/notifications/unread-chat-count`, method: "GET" },
      options
    );
  };

  /**
 * 채팅 알림과 게시판 알림을 구분하여 읽지 않은 알림 개수를 조회합니다.

**알림 타입 구분:**
- **채팅 알림**: `type = 'chat'`인 알림
  - 채팅 메시지 알림
  - 시스템 메시지 알림 (입장, 퇴장 등)
- **게시판 알림**: `type != 'chat'`인 모든 알림
  - 커뮤니티 알림 (`type = 'community'`): 게시글 좋아요, 댓글, 대댓글
  - 매치 알림 (`type = 'match'`): 참가 승인, 거부, 시작 등
  - 시스템 알림 (`type = 'system'`): 공지사항, 업데이트 등
  - 마케팅 알림 (`type = 'marketing'`): 프로모션, 이벤트 등

**사용 예시:**
- 탭별로 다른 배지 표시 (채팅 탭 vs 알림 탭)
- 알림 설정에 따른 개별 관리
- 사용자 경험 개선을 위한 세분화된 알림 표시

**응답 데이터:**
- `totalCount`: 전체 읽지 않은 알림 개수 (채팅 + 게시판)
- `chatNotificationCount`: 채팅 알림만의 개수
- `boardNotificationCount`: 게시판 알림만의 개수

 * @summary 타입별 읽지 않은 알림 개수 조회
 */
  const getApiNotificationsUnreadCountByType = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiNotificationsUnreadCountByType200>(
      { url: `/api/notifications/unread-count-by-type`, method: "GET" },
      options
    );
  };

  /**
   * @summary 알림 읽음 처리
   */
  const postApiNotificationsNotificationIdRead = (
    notificationId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/notifications/${notificationId}/read`, method: "POST" },
      options
    );
  };

  /**
   * @summary 모든 알림 읽음 처리
   */
  const postApiNotificationsReadAll = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/notifications/read-all`, method: "POST" },
      options
    );
  };

  /**
   * @summary 알림 삭제
   */
  const deleteApiNotificationsNotificationId = (
    notificationId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      { url: `/api/notifications/${notificationId}`, method: "DELETE" },
      options
    );
  };

  /**
 * Firebase Cloud Messaging(FCM) 푸시 알림을 위한 토큰을 등록하거나 업데이트합니다.

**사용 시나리오:**
- 사용자가 푸시 알림 권한을 허용했을 때
- FCM 토큰이 갱신되었을 때 (24시간마다)
- 새로운 디바이스에서 로그인했을 때

**토큰 관리:**
- 같은 토큰이 이미 존재하면 업데이트
- 새로운 토큰이면 추가
- 사용자당 여러 디바이스 토큰 지원

**푸시 알림 타입:**
- 채팅 메시지 알림
- 매치 참가 승인/거부 알림
- 매치 시작 알림
- 커뮤니티 알림 (댓글, 좋아요)
- 시스템 공지사항

 * @summary FCM 토큰 등록/업데이트
 */
  const postApiNotificationsFcmToken = (
    updateFcmTokenRequest: UpdateFcmTokenRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiNotificationsFcmToken200>(
      {
        url: `/api/notifications/fcm-token`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: updateFcmTokenRequest,
      },
      options
    );
  };

  /**
 * 사용자의 알림 설정을 조회합니다.

**설정 항목:**
- `match_notifications`: 매치 관련 알림 (참가 승인, 거부, 시작 등)
- `chat_notifications`: 채팅 메시지 알림
- `community_notifications`: 커뮤니티 알림 (게시글 좋아요, 댓글, 대댓글)
- `marketing_notifications`: 마케팅 및 프로모션 알림

 * @summary 알림 설정 조회
 */
  const getApiNotificationsSettings = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiNotificationsSettings200>(
      { url: `/api/notifications/settings`, method: "GET" },
      options
    );
  };

  /**
 * 사용자의 알림 설정을 업데이트합니다.

**커뮤니티 알림 설정:**
- `community_notifications`를 `false`로 설정하면 다음 알림이 발송되지 않습니다:
  - 게시글 좋아요 알림
  - 댓글 작성 알림
  - 대댓글 작성 알림

**업데이트 방식:**
- 제공된 필드만 업데이트됩니다 (PATCH 방식)
- 생략된 필드는 기존 값이 유지됩니다

 * @summary 알림 설정 업데이트
 */
  const putApiNotificationsSettings = (
    updateNotificationSettingsRequest: UpdateNotificationSettingsRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      {
        url: `/api/notifications/settings`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateNotificationSettingsRequest,
      },
      options
    );
  };

  /**
   * @summary 내 프로필 조회
   */
  const getApiProfileMe = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiProfileMe200>(
      { url: `/api/profile/me`, method: "GET" },
      options
    );
  };

  /**
   * @summary 내 프로필 수정
   */
  const putApiProfileMe = (
    updateProfileRequest: UpdateProfileRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<SuccessResponse>(
      {
        url: `/api/profile/me`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateProfileRequest,
      },
      options
    );
  };

  /**
   * @summary 다른 사용자 프로필 조회
   */
  const getApiProfileUsersUserId = (
    userId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiProfileUsersUserId200>(
      { url: `/api/profile/users/${userId}`, method: "GET" },
      options
    );
  };

  /**
   * @summary 내 매치 기록 조회
   */
  const getApiProfileMyMatches = (
    params?: GetApiProfileMyMatchesParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiProfileMyMatches200>(
      { url: `/api/profile/my-matches`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 내가 받은 리뷰 조회
   */
  const getApiProfileMyReviews = (
    params?: GetApiProfileMyReviewsParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiProfileMyReviews200>(
      { url: `/api/profile/my-reviews`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 특정 사용자가 받은 리뷰 조회
   */
  const getApiProfileUsersUserIdReviews = (
    userId: string,
    params?: GetApiProfileUsersUserIdReviewsParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiProfileUsersUserIdReviews200>(
      { url: `/api/profile/users/${userId}/reviews`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 북마크한 매치 조회
   */
  const getApiProfileBookmarks = (
    params?: GetApiProfileBookmarksParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiProfileBookmarks200>(
      { url: `/api/profile/bookmarks`, method: "GET", params },
      options
    );
  };

  /**
 * 특정 사용자에게 커스텀 푸시 알림을 전송합니다.

**주의사항:**
- 관리자 권한이 필요합니다
- 사용자가 FCM 토큰을 등록해야 알림이 전송됩니다
- 사용자의 알림 설정이 활성화되어 있어야 합니다

 * @summary 개별 사용자에게 푸시 알림 전송 (관리자용)
 */
  const postApiPushSend = (
    postApiPushSendBody: PostApiPushSendBody,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiPushSend200>(
      {
        url: `/api/push/send`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postApiPushSendBody,
      },
      options
    );
  };

  /**
 * 새로운 채팅 메시지가 도착했을 때 수신자에게 푸시 알림을 전송합니다.

**자동 전송 시점:**
- 사용자가 오프라인일 때
- 사용자가 해당 채팅방에 없을 때
- 백그라운드 상태일 때

 * @summary 채팅 메시지 푸시 알림 전송 (내부용)
 */
  const postApiPushChat = (
    postApiPushChatBody: PostApiPushChatBody,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<null>(
      {
        url: `/api/push/chat`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postApiPushChatBody,
      },
      options
    );
  };

  /**
 * 매치 호스트가 참가 신청을 승인했을 때 신청자에게 알림을 전송합니다.

 * @summary 매치 참가 승인 알림 전송
 */
  const postApiPushMatchApproval = (
    postApiPushMatchApprovalBody: PostApiPushMatchApprovalBody,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<null>(
      {
        url: `/api/push/match/approval`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postApiPushMatchApprovalBody,
      },
      options
    );
  };

  /**
 * 매치 시작 시간이 가까워졌을 때 참가자들에게 알림을 전송합니다.

**전송 시점:**
- 매치 시작 1시간 전
- 매치 시작 30분 전 (선택)

 * @summary 매치 시작 알림 전송
 */
  const postApiPushMatchStart = (
    postApiPushMatchStartBody: PostApiPushMatchStartBody,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<null>(
      {
        url: `/api/push/match/start`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postApiPushMatchStartBody,
      },
      options
    );
  };

  /**
 * 게시글에 대한 댓글, 좋아요 등의 알림을 전송합니다.

 * @summary 커뮤니티 알림 전송
 */
  const postApiPushCommunity = (
    postApiPushCommunityBody: PostApiPushCommunityBody,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<null>(
      {
        url: `/api/push/community`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postApiPushCommunityBody,
      },
      options
    );
  };

  /**
 * 사용자의 FCM 토큰을 삭제/비활성화합니다.

**사용 시점:**
- 로그아웃 시
- 푸시 알림 비활성화 시
- 앱 삭제 시

 * @summary FCM 토큰 삭제
 */
  const deleteApiPushToken = (
    deleteApiPushTokenBody: DeleteApiPushTokenBody,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<null>(
      {
        url: `/api/push/token`,
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        data: deleteApiPushTokenBody,
      },
      options
    );
  };

  /**
   * @summary 지역 데이터 조회
   */
  const getApiRegions = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiRegions200>(
      { url: `/api/regions`, method: "GET" },
      options
    );
  };

  /**
   * 사용자가 참가했던 완료된 매치 중 아직 리뷰하지 않은 참가자가 있는 매치 목록을 조회합니다.
   * @summary 리뷰 가능한 매치 목록 조회
   */
  const getApiReviewsReviewable = (
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiReviewsReviewable200>(
      { url: `/api/reviews/reviewable`, method: "GET" },
      options
    );
  };

  /**
   * 특정 매치의 참가자에 대한 리뷰를 제출합니다.
   * @summary 리뷰 제출
   */
  const postApiReviewsMatchesMatchId = (
    matchId: string,
    submitReviewRequest: SubmitReviewRequest,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<PostApiReviewsMatchesMatchId200>(
      {
        url: `/api/reviews/matches/${matchId}`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: submitReviewRequest,
      },
      options
    );
  };

  /**
   * 특정 사용자가 받은 모든 리뷰를 최신순으로 조회합니다.
   * @summary 사용자가 받은 리뷰 조회
   */
  const getApiReviewsUsersUserId = (
    userId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiReviewsUsersUserId200>(
      { url: `/api/reviews/users/${userId}`, method: "GET" },
      options
    );
  };

  /**
   * @summary 테니스장 검색
   */
  const getApiVenues = (
    params?: GetApiVenuesParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiVenues200>(
      { url: `/api/venues`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 모든 테니스장 조회
   */
  const getApiVenuesAll = (
    params?: GetApiVenuesAllParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiVenuesAll200>(
      { url: `/api/venues/all`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 근처 테니스장 조회
   */
  const getApiVenuesNearby = (
    params: GetApiVenuesNearbyParams,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiVenuesNearby200>(
      { url: `/api/venues/nearby`, method: "GET", params },
      options
    );
  };

  /**
   * @summary 테니스장 상세 정보 조회
   */
  const getApiVenuesVenueId = (
    venueId: string,
    options?: SecondParameter<typeof customAxiosInstance>
  ) => {
    return customAxiosInstance<GetApiVenuesVenueId200>(
      { url: `/api/venues/${venueId}`, method: "GET" },
      options
    );
  };

  return {
    postApiAuthLogin,
    postApiAuthRefresh,
    postApiAuthLogout,
    postApiAuthSignup,
    getApiAuthMe,
    getApiChatRooms,
    postApiChatRooms,
    getApiChatRoomsChatRoomId,
    deleteApiChatRoomsChatRoomId,
    getApiChatRoomsChatRoomIdMessages,
    postApiChatRoomsChatRoomIdMessages,
    getApiChatRoomsChatRoomIdMessagesAll,
    postApiChatRoomsChatRoomIdRead,
    postApiChatRoomsChatRoomIdLeave,
    postApiChatRoomsChatRoomIdJoin,
    postApiChatRoomsChatRoomIdApprove,
    postApiChatRoomsChatRoomIdCancelApproval,
    getApiCommunityPosts,
    postApiCommunityPosts,
    getApiCommunityPostsPostId,
    putApiCommunityPostsPostId,
    deleteApiCommunityPostsPostId,
    postApiCommunityPostsPostIdLike,
    deleteApiCommunityPostsPostIdLike,
    getApiCommunityPostsPostIdComments,
    postApiCommunityPostsPostIdComments,
    deleteApiCommunityCommentsCommentId,
    getApiHome,
    getApiMatches,
    postApiMatches,
    getApiMatchesMatchId,
    postApiMatchesMatchIdJoin,
    postApiMatchesMatchIdShare,
    postApiMatchesMatchIdBookmark,
    deleteApiMatchesMatchIdBookmark,
    postApiMatchesMatchIdChat,
    postApiMatchesMatchIdChatPrivate,
    getApiNotifications,
    getApiNotificationsUnreadCount,
    getApiNotificationsUnreadChatCount,
    getApiNotificationsUnreadCountByType,
    postApiNotificationsNotificationIdRead,
    postApiNotificationsReadAll,
    deleteApiNotificationsNotificationId,
    postApiNotificationsFcmToken,
    getApiNotificationsSettings,
    putApiNotificationsSettings,
    getApiProfileMe,
    putApiProfileMe,
    getApiProfileUsersUserId,
    getApiProfileMyMatches,
    getApiProfileMyReviews,
    getApiProfileUsersUserIdReviews,
    getApiProfileBookmarks,
    postApiPushSend,
    postApiPushChat,
    postApiPushMatchApproval,
    postApiPushMatchStart,
    postApiPushCommunity,
    deleteApiPushToken,
    getApiRegions,
    getApiReviewsReviewable,
    postApiReviewsMatchesMatchId,
    getApiReviewsUsersUserId,
    getApiVenues,
    getApiVenuesAll,
    getApiVenuesNearby,
    getApiVenuesVenueId,
  };
};
export type PostApiAuthLoginResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiAuthLogin"]>>
>;
export type PostApiAuthRefreshResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiAuthRefresh"]>
  >
>;
export type PostApiAuthLogoutResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiAuthLogout"]>
  >
>;
export type PostApiAuthSignupResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiAuthSignup"]>
  >
>;
export type GetApiAuthMeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiAuthMe"]>>
>;
export type GetApiChatRoomsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiChatRooms"]>>
>;
export type PostApiChatRoomsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiChatRooms"]>>
>;
export type GetApiChatRoomsChatRoomIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["getApiChatRoomsChatRoomId"]
    >
  >
>;
export type DeleteApiChatRoomsChatRoomIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["deleteApiChatRoomsChatRoomId"]
    >
  >
>;
export type GetApiChatRoomsChatRoomIdMessagesResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["getApiChatRoomsChatRoomIdMessages"]
    >
  >
>;
export type PostApiChatRoomsChatRoomIdMessagesResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["postApiChatRoomsChatRoomIdMessages"]
    >
  >
>;
export type GetApiChatRoomsChatRoomIdMessagesAllResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["getApiChatRoomsChatRoomIdMessagesAll"]
    >
  >
>;
export type PostApiChatRoomsChatRoomIdReadResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiChatRoomsChatRoomIdRead"]
    >
  >
>;
export type PostApiChatRoomsChatRoomIdLeaveResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiChatRoomsChatRoomIdLeave"]
    >
  >
>;
export type PostApiChatRoomsChatRoomIdJoinResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiChatRoomsChatRoomIdJoin"]
    >
  >
>;
export type PostApiChatRoomsChatRoomIdApproveResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiChatRoomsChatRoomIdApprove"]
    >
  >
>;
export type PostApiChatRoomsChatRoomIdCancelApprovalResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["postApiChatRoomsChatRoomIdCancelApproval"]
    >
  >
>;
export type GetApiCommunityPostsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiCommunityPosts"]>
  >
>;
export type PostApiCommunityPostsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiCommunityPosts"]>
  >
>;
export type GetApiCommunityPostsPostIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["getApiCommunityPostsPostId"]
    >
  >
>;
export type PutApiCommunityPostsPostIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["putApiCommunityPostsPostId"]
    >
  >
>;
export type DeleteApiCommunityPostsPostIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["deleteApiCommunityPostsPostId"]
    >
  >
>;
export type PostApiCommunityPostsPostIdLikeResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiCommunityPostsPostIdLike"]
    >
  >
>;
export type DeleteApiCommunityPostsPostIdLikeResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["deleteApiCommunityPostsPostIdLike"]
    >
  >
>;
export type GetApiCommunityPostsPostIdCommentsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["getApiCommunityPostsPostIdComments"]
    >
  >
>;
export type PostApiCommunityPostsPostIdCommentsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["postApiCommunityPostsPostIdComments"]
    >
  >
>;
export type DeleteApiCommunityCommentsCommentIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["deleteApiCommunityCommentsCommentId"]
    >
  >
>;
export type GetApiHomeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiHome"]>>
>;
export type GetApiMatchesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiMatches"]>>
>;
export type PostApiMatchesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiMatches"]>>
>;
export type GetApiMatchesMatchIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiMatchesMatchId"]>
  >
>;
export type PostApiMatchesMatchIdJoinResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiMatchesMatchIdJoin"]
    >
  >
>;
export type PostApiMatchesMatchIdShareResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiMatchesMatchIdShare"]
    >
  >
>;
export type PostApiMatchesMatchIdBookmarkResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiMatchesMatchIdBookmark"]
    >
  >
>;
export type DeleteApiMatchesMatchIdBookmarkResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["deleteApiMatchesMatchIdBookmark"]
    >
  >
>;
export type PostApiMatchesMatchIdChatResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiMatchesMatchIdChat"]
    >
  >
>;
export type PostApiMatchesMatchIdChatPrivateResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiMatchesMatchIdChatPrivate"]
    >
  >
>;
export type GetApiNotificationsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiNotifications"]>
  >
>;
export type GetApiNotificationsUnreadCountResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["getApiNotificationsUnreadCount"]
    >
  >
>;
export type GetApiNotificationsUnreadChatCountResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["getApiNotificationsUnreadChatCount"]
    >
  >
>;
export type GetApiNotificationsUnreadCountByTypeResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["getApiNotificationsUnreadCountByType"]
    >
  >
>;
export type PostApiNotificationsNotificationIdReadResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["postApiNotificationsNotificationIdRead"]
    >
  >
>;
export type PostApiNotificationsReadAllResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiNotificationsReadAll"]
    >
  >
>;
export type DeleteApiNotificationsNotificationIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getWeHandTennisAPI
      >["deleteApiNotificationsNotificationId"]
    >
  >
>;
export type PostApiNotificationsFcmTokenResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiNotificationsFcmToken"]
    >
  >
>;
export type GetApiNotificationsSettingsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["getApiNotificationsSettings"]
    >
  >
>;
export type PutApiNotificationsSettingsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["putApiNotificationsSettings"]
    >
  >
>;
export type GetApiProfileMeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiProfileMe"]>>
>;
export type PutApiProfileMeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["putApiProfileMe"]>>
>;
export type GetApiProfileUsersUserIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["getApiProfileUsersUserId"]
    >
  >
>;
export type GetApiProfileMyMatchesResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiProfileMyMatches"]>
  >
>;
export type GetApiProfileMyReviewsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiProfileMyReviews"]>
  >
>;
export type GetApiProfileUsersUserIdReviewsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["getApiProfileUsersUserIdReviews"]
    >
  >
>;
export type GetApiProfileBookmarksResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiProfileBookmarks"]>
  >
>;
export type PostApiPushSendResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiPushSend"]>>
>;
export type PostApiPushChatResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiPushChat"]>>
>;
export type PostApiPushMatchApprovalResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiPushMatchApproval"]
    >
  >
>;
export type PostApiPushMatchStartResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiPushMatchStart"]>
  >
>;
export type PostApiPushCommunityResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["postApiPushCommunity"]>
  >
>;
export type DeleteApiPushTokenResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["deleteApiPushToken"]>
  >
>;
export type GetApiRegionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiRegions"]>>
>;
export type GetApiReviewsReviewableResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiReviewsReviewable"]>
  >
>;
export type PostApiReviewsMatchesMatchIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["postApiReviewsMatchesMatchId"]
    >
  >
>;
export type GetApiReviewsUsersUserIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getWeHandTennisAPI>["getApiReviewsUsersUserId"]
    >
  >
>;
export type GetApiVenuesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiVenues"]>>
>;
export type GetApiVenuesAllResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiVenuesAll"]>>
>;
export type GetApiVenuesNearbyResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiVenuesNearby"]>
  >
>;
export type GetApiVenuesVenueIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getWeHandTennisAPI>["getApiVenuesVenueId"]>
  >
>;
