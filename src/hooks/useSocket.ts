import { useEffect, useCallback, useRef } from "react";
import { io, Socket } from "socket.io-client";
import { useAuth } from "./useAuth";
import {
  SocketEvent,
  NewMessageEvent,
  MessageReadByEvent,
  UserJoinedEvent,
  UserLeftEvent,
  ParticipantApprovedEvent,
  SocketError,
} from "@/types/socket";

interface UseSocketOptions {
  chatRoomId?: string;
  onNewMessage?: (data: NewMessageEvent) => void;
  onMessageReadBy?: (data: MessageReadByEvent) => void;
  onUserJoined?: (data: UserJoinedEvent) => void;
  onUserLeft?: (data: UserLeftEvent) => void;
  onParticipantApproved?: (data: ParticipantApprovedEvent) => void;
  onError?: (error: SocketError) => void;
}

// Ï†ÑÏó≠ ÏÜåÏºì Ïù∏Ïä§ÌÑ¥Ïä§ (StrictModeÏóêÏÑúÎèÑ Îã®Ïùº Ïù∏Ïä§ÌÑ¥Ïä§ Î≥¥Ïû•)
let globalSocket: Socket | null = null;
let globalPreviousRoomId: string | undefined = undefined;

export const useSocket = (options: UseSocketOptions = {}) => {
  const { user, isAuthenticated, accessToken } = useAuth();
  const {
    chatRoomId,
    onNewMessage,
    onMessageReadBy,
    onUserJoined,
    onUserLeft,
    onParticipantApproved,
    onError,
  } = options;

  // ÏΩúÎ∞± Ìï®ÏàòÎì§ÏùÑ refÎ°ú Ï†ÄÏû•ÌïòÏó¨ Ïû¨Î†åÎçîÎßÅ ÏãúÏóêÎèÑ Ï∞∏Ï°∞ Ïú†ÏßÄ
  const callbacksRef = useRef({
    onNewMessage,
    onMessageReadBy,
    onUserJoined,
    onUserLeft,
    onParticipantApproved,
    onError,
  });

  // ÏΩúÎ∞± ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    callbacksRef.current = {
      onNewMessage,
      onMessageReadBy,
      onUserJoined,
      onUserLeft,
      onParticipantApproved,
      onError,
    };
  });

  // Socket Ïó∞Í≤∞ Ï¥àÍ∏∞Ìôî
  const initSocket = useCallback(() => {
    console.log("üîç Socket Ï¥àÍ∏∞Ìôî ÏãúÎèÑ", {
      isAuthenticated,
      userId: user?.id,
      hasToken: !!accessToken,
    });

    if (!isAuthenticated || !user || !accessToken) {
      console.log("Socket Ïó∞Í≤∞ Ïã§Ìå®: Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê ÎòêÎäî ÌÜ†ÌÅ∞ ÏóÜÏùå", {
        isAuthenticated,
        user,
        hasToken: !!accessToken,
      });
      return;
    }

    // Ïù¥ÎØ∏ ÏÜåÏºìÏù¥ ÏûàÏúºÎ©¥ (Ïó∞Í≤∞ Ï§ëÏù¥Í±∞ÎÇò Ïó∞Í≤∞Îê®) Ïû¨ÏÇ¨Ïö©
    if (globalSocket) {
      console.log("Socket Ïù∏Ïä§ÌÑ¥Ïä§ Ï°¥Ïû¨ - Ïû¨ÏÇ¨Ïö©", {
        connected: globalSocket.connected,
        connecting: globalSocket.connecting,
      });
      return globalSocket;
    }

    // Socket.io ÏÑúÎ≤Ñ URL (ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞)
    const socketUrl =
      import.meta.env.VITE_SOCKET_URL || "http://localhost:3000";

    console.log("üîå Socket Ïó∞Í≤∞ ÏãúÎèÑ:", {
      url: socketUrl,
      userId: user.id,
      tokenLength: accessToken?.length,
    });

    // Socket Ïó∞Í≤∞ ÏÉùÏÑ±
    const socket = io(socketUrl, {
      auth: {
        token: accessToken, // Supabase JWT ÌÜ†ÌÅ∞ Ï†ÑÏÜ°
        userId: user.id,
      },
      transports: ["websocket", "polling"],
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
    });

    // Ïó∞Í≤∞ Ïù¥Î≤§Ìä∏
    socket.on(SocketEvent.CONNECT, () => {
      console.log("‚úÖ Socket Ïó∞Í≤∞ ÏÑ±Í≥µ:", socket.id);
      // Ïó¨Í∏∞ÏÑúÎäî join ÌïòÏßÄ ÏïäÏùå - useEffectÏóêÏÑú Ï≤òÎ¶¨
    });

    // Ï±ÑÌåÖÎ∞© Ï∞∏Í∞Ä ÏÑ±Í≥µ Ïù¥Î≤§Ìä∏
    socket.on("joined-chat-room", ({ chatRoomId: roomId }) => {
      console.log(`‚úÖ Ï±ÑÌåÖÎ∞© ${roomId}Ïóê ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∞∏Í∞Ä`);
    });

    // Ï±ÑÌåÖÎ∞© Ï∞∏Í∞Ä Ïã§Ìå® Ïù¥Î≤§Ìä∏
    socket.on("join-chat-room-error", ({ error: joinError }) => {
      console.error("‚ùå Ï±ÑÌåÖÎ∞© Ï∞∏Í∞Ä Ïã§Ìå®:", joinError);
      callbacksRef.current.onError?.({
        code: "JOIN_ERROR",
        message: joinError,
      });
    });

    // Ïó∞Í≤∞ Ìï¥Ï†ú Ïù¥Î≤§Ìä∏
    socket.on(SocketEvent.DISCONNECT, (reason) => {
      console.log("üîå Socket Ïó∞Í≤∞ Ìï¥Ï†ú:", reason);
    });

    // ÏóêÎü¨ Ïù¥Î≤§Ìä∏
    socket.on(SocketEvent.ERROR, (error: SocketError) => {
      console.error("‚ùå Socket ÏóêÎü¨:", error);
      callbacksRef.current.onError?.(error);
    });

    globalSocket = socket;
    return socket;
  }, [isAuthenticated, user, accessToken, chatRoomId]);

  // Ï±ÑÌåÖÎ∞© Ï∞∏Í∞Ä
  const joinRoom = useCallback((roomId: string) => {
    if (globalSocket?.connected) {
      // ÏÑúÎ≤ÑÍ∞Ä Í∏∞ÎåÄÌïòÎäî Ïù¥Î≤§Ìä∏Î™Ö ÏÇ¨Ïö© (Î¨∏ÏûêÏó¥Î°ú Ï†ÑÏÜ°)
      globalSocket.emit("join-chat-room", roomId);
      console.log(`üìå Ï±ÑÌåÖÎ∞© ${roomId}Ïóê Ï∞∏Í∞Ä ÏöîÏ≤≠`);
    } else {
      console.warn("‚ö†Ô∏è SocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå. Ï±ÑÌåÖÎ∞© Ï∞∏Í∞Ä Î∂àÍ∞Ä");
    }
  }, []);

  // Ï±ÑÌåÖÎ∞© ÎÇòÍ∞ÄÍ∏∞
  const leaveRoom = useCallback((roomId: string) => {
    if (globalSocket?.connected) {
      // ÏÑúÎ≤ÑÍ∞Ä Í∏∞ÎåÄÌïòÎäî Ïù¥Î≤§Ìä∏Î™Ö ÏÇ¨Ïö© (Î¨∏ÏûêÏó¥Î°ú Ï†ÑÏÜ°)
      globalSocket.emit("leave-chat-room", roomId);
      console.log(`üëã Ï±ÑÌåÖÎ∞© ${roomId}ÏóêÏÑú ÎÇòÍ∞ÄÍ∏∞ ÏöîÏ≤≠`);
    }
  }, []);

  // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï Î∞è Ï±ÑÌåÖÎ∞© Í¥ÄÎ¶¨
  useEffect(() => {
    if (!isAuthenticated || !user) return;

    const socket = initSocket();
    if (!socket) return;

    // Ï±ÑÌåÖÎ∞© Ï†ÑÌôò Ï≤òÎ¶¨ - chatRoomIdÍ∞Ä ÏûàÍ≥† Ïù¥Ï†ÑÍ≥º Îã§Î•º ÎïåÎßå
    if (chatRoomId && globalPreviousRoomId !== chatRoomId) {
      // Ïù¥Ï†Ñ Ï±ÑÌåÖÎ∞©ÏóêÏÑú ÎÇòÍ∞ÄÍ∏∞
      if (globalPreviousRoomId) {
        socket.emit("leave-chat-room", globalPreviousRoomId);
        console.log(`üëã Ïù¥Ï†Ñ Ï±ÑÌåÖÎ∞© ${globalPreviousRoomId}ÏóêÏÑú ÎÇòÍ∞ÄÍ∏∞`);
      }

      // globalPreviousRoomIdÎ•º Î®ºÏ†Ä ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏó¨ Ï§ëÎ≥µ Î∞©ÏßÄ
      globalPreviousRoomId = chatRoomId;

      // ÏÉà Ï±ÑÌåÖÎ∞©Ïóê Ï∞∏Í∞Ä (socketÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏùÑ ÎïåÎßå)
      if (socket.connected) {
        socket.emit("join-chat-room", chatRoomId);
        console.log(`üìå Ï±ÑÌåÖÎ∞© ${chatRoomId}Ïóê Ï∞∏Í∞Ä (useEffect)`);
      } else {
        // Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏúºÎ©¥ Ïó∞Í≤∞ ÌõÑ Ï∞∏Í∞Ä
        socket.once(SocketEvent.CONNECT, () => {
          // Ïó∞Í≤∞ ÏãúÏ†êÏóê Îã§Ïãú ÌôïÏù∏
          if (globalPreviousRoomId === chatRoomId) {
            socket.emit("join-chat-room", chatRoomId);
            console.log(`üìå Ï±ÑÌåÖÎ∞© ${chatRoomId}Ïóê Ï∞∏Í∞Ä (Ïó∞Í≤∞ ÌõÑ)`);
          }
        });
      }
    }

    // ÎîîÎ≤ÑÍπÖ: Î™®Îì† Ïù¥Î≤§Ìä∏ Î°úÍπÖ (Ïù¥ÎØ∏ Ïò§Î≤ÑÎùºÏù¥Îìú ÎêòÏñ¥ÏûàÏßÄ ÏïäÏùÄ Í≤ΩÏö∞Îßå)
    if (!socket.emit.toString().includes("Emitting event")) {
      const originalEmit = socket.emit;
      socket.emit = function (...args: any[]) {
        console.log("üì§ Emitting event:", args[0], args[1]);
        return originalEmit.apply(socket, args as any);
      };
    }

    // ÎîîÎ≤ÑÍπÖ: Î∞õÎäî Î™®Îì† Ïù¥Î≤§Ìä∏ ÌôïÏù∏
    socket.onAny((eventName, ...args) => {
      console.log("üì• Received event:", eventName, args);
    });

    // ÏÉà Î©îÏãúÏßÄ Ïù¥Î≤§Ìä∏ (ÏÑúÎ≤ÑÍ∞Ä Î≥¥ÎÇ¥Îäî Ï†ïÌôïÌïú Ïù¥Î≤§Ìä∏Î™Ö ÏÇ¨Ïö©)
    const handleNewMessage = (data: any) => {
      console.log("üîµ new-message Ïù¥Î≤§Ìä∏ ÏàòÏã†:", data);

      // ÏÑúÎ≤Ñ ÌéòÏù¥Î°úÎìúÎ•º ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
      const messageEvent: NewMessageEvent = {
        id: data.id,
        content: data.content,
        messageType: data.messageType || data.message_type,
        sender: data.sender,
        timestamp: data.timestamp || data.created_at,
        chatRoomId: data.chatRoomId || chatRoomId || "",
      };

      callbacksRef.current.onNewMessage?.(messageEvent);
    };

    socket.on(SocketEvent.NEW_MESSAGE, handleNewMessage);

    // Î©îÏãúÏßÄ ÏùΩÏùå Ïù¥Î≤§Ìä∏
    const handleMessageReadBy = (data: any) => {
      console.log("üîµ message-read-by Ïù¥Î≤§Ìä∏ ÏàòÏã†:", data);
      callbacksRef.current.onMessageReadBy?.(data as MessageReadByEvent);
    };

    socket.on(SocketEvent.MESSAGE_READ_BY, handleMessageReadBy);

    // ÏÇ¨Ïö©Ïûê ÏûÖÏû• Ïù¥Î≤§Ìä∏
    const handleUserJoined = (data: any) => {
      console.log("üîµ user-joined Ïù¥Î≤§Ìä∏ ÏàòÏã†:", data);
      callbacksRef.current.onUserJoined?.(data as UserJoinedEvent);
    };

    socket.on(SocketEvent.USER_JOINED, handleUserJoined);

    // ÏÇ¨Ïö©Ïûê Ìá¥Ïû• Ïù¥Î≤§Ìä∏
    const handleUserLeft = (data: any) => {
      console.log("üîµ user-left Ïù¥Î≤§Ìä∏ ÏàòÏã†:", data);
      callbacksRef.current.onUserLeft?.(data as UserLeftEvent);
    };

    socket.on(SocketEvent.USER_LEFT, handleUserLeft);

    // Ï∞∏Í∞ÄÏûê ÏäπÏù∏ Ïù¥Î≤§Ìä∏
    const handleParticipantApproved = (data: any) => {
      console.log("üîµ participant-approved Ïù¥Î≤§Ìä∏ ÏàòÏã†:", data);
      callbacksRef.current.onParticipantApproved?.(
        data as ParticipantApprovedEvent
      );
    };

    socket.on(SocketEvent.PARTICIPANT_APPROVED, handleParticipantApproved);

    // Cleanup
    return () => {
      // globalSocketÏù¥ ÌòÑÏû¨ socketÍ≥º Í∞ôÏùÑ ÎïåÎßå Ï†ïÎ¶¨
      if (globalSocket === socket) {
        // Ïã§Ï†úÎ°ú Î¶¨Ïä§ÎÑàÍ∞Ä ÏûàÏùÑ ÎïåÎßå Î°úÍ∑∏ Ï∂úÎ†•
        const hasListeners = socket.listeners(SocketEvent.NEW_MESSAGE).length > 0;
        if (hasListeners) {
          console.log("üßπ Socket cleanup - removing listeners");
        }

        // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞Îßå ÏàòÌñâ (leaveÎäî Ï±ÑÌåÖÎ∞© Ï†ÑÌôò Ïãú Ï≤òÎ¶¨Îê®)
        socket.off(SocketEvent.NEW_MESSAGE, handleNewMessage);
        socket.off(SocketEvent.MESSAGE_READ_BY, handleMessageReadBy);
        socket.off(SocketEvent.USER_JOINED, handleUserJoined);
        socket.off(SocketEvent.USER_LEFT, handleUserLeft);
        socket.off(SocketEvent.PARTICIPANT_APPROVED, handleParticipantApproved);

        socket.offAny();
      }
    };
  }, [isAuthenticated, user, chatRoomId, initSocket]);

  // Socket Ïó∞Í≤∞ Ìï¥Ï†ú
  const disconnect = useCallback(() => {
    if (globalSocket) {
      globalSocket.disconnect();
      globalSocket = null;
      globalPreviousRoomId = undefined;
      console.log("Socket Ïó∞Í≤∞ Ìï¥Ï†úÎê®");
    }
  }, []);

  return {
    socket: globalSocket,
    isConnected: globalSocket?.connected || false,
    joinRoom,
    leaveRoom,
    disconnect,
  };
};
